// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"github.com/doutokk/doutok/app/payment/biz/dal/model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPaymentLog(db *gorm.DB, opts ...gen.DOOption) paymentLog {
	_paymentLog := paymentLog{}

	_paymentLog.paymentLogDo.UseDB(db, opts...)
	_paymentLog.paymentLogDo.UseModel(&model.PaymentLog{})

	tableName := _paymentLog.paymentLogDo.TableName()
	_paymentLog.ALL = field.NewAsterisk(tableName)
	_paymentLog.ID = field.NewUint(tableName, "id")
	_paymentLog.CreatedAt = field.NewTime(tableName, "created_at")
	_paymentLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_paymentLog.DeletedAt = field.NewField(tableName, "deleted_at")
	_paymentLog.UserId = field.NewUint32(tableName, "user_id")
	_paymentLog.OrderId = field.NewString(tableName, "order_id")
	_paymentLog.TransactionId = field.NewString(tableName, "transaction_id")
	_paymentLog.Status = field.NewString(tableName, "status")
	_paymentLog.Amount = field.NewFloat32(tableName, "amount")
	_paymentLog.PayAt = field.NewTime(tableName, "pay_at")

	_paymentLog.fillFieldMap()

	return _paymentLog
}

type paymentLog struct {
	paymentLogDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	UserId        field.Uint32
	OrderId       field.String
	TransactionId field.String
	Status        field.String
	Amount        field.Float32
	PayAt         field.Time

	fieldMap map[string]field.Expr
}

func (p paymentLog) Table(newTableName string) *paymentLog {
	p.paymentLogDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentLog) As(alias string) *paymentLog {
	p.paymentLogDo.DO = *(p.paymentLogDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentLog) updateTableName(table string) *paymentLog {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.UserId = field.NewUint32(table, "user_id")
	p.OrderId = field.NewString(table, "order_id")
	p.TransactionId = field.NewString(table, "transaction_id")
	p.Status = field.NewString(table, "status")
	p.Amount = field.NewFloat32(table, "amount")
	p.PayAt = field.NewTime(table, "pay_at")

	p.fillFieldMap()

	return p
}

func (p *paymentLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentLog) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["user_id"] = p.UserId
	p.fieldMap["order_id"] = p.OrderId
	p.fieldMap["transaction_id"] = p.TransactionId
	p.fieldMap["status"] = p.Status
	p.fieldMap["amount"] = p.Amount
	p.fieldMap["pay_at"] = p.PayAt
}

func (p paymentLog) clone(db *gorm.DB) paymentLog {
	p.paymentLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentLog) replaceDB(db *gorm.DB) paymentLog {
	p.paymentLogDo.ReplaceDB(db)
	return p
}

type paymentLogDo struct{ gen.DO }

type IPaymentLogDo interface {
	gen.SubQuery
	Debug() IPaymentLogDo
	WithContext(ctx context.Context) IPaymentLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaymentLogDo
	WriteDB() IPaymentLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaymentLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentLogDo
	Not(conds ...gen.Condition) IPaymentLogDo
	Or(conds ...gen.Condition) IPaymentLogDo
	Select(conds ...field.Expr) IPaymentLogDo
	Where(conds ...gen.Condition) IPaymentLogDo
	Order(conds ...field.Expr) IPaymentLogDo
	Distinct(cols ...field.Expr) IPaymentLogDo
	Omit(cols ...field.Expr) IPaymentLogDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo
	Group(cols ...field.Expr) IPaymentLogDo
	Having(conds ...gen.Condition) IPaymentLogDo
	Limit(limit int) IPaymentLogDo
	Offset(offset int) IPaymentLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentLogDo
	Unscoped() IPaymentLogDo
	Create(values ...*model.PaymentLog) error
	CreateInBatches(values []*model.PaymentLog, batchSize int) error
	Save(values ...*model.PaymentLog) error
	First() (*model.PaymentLog, error)
	Take() (*model.PaymentLog, error)
	Last() (*model.PaymentLog, error)
	Find() ([]*model.PaymentLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentLog, err error)
	FindInBatches(result *[]*model.PaymentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PaymentLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentLogDo
	Assign(attrs ...field.AssignExpr) IPaymentLogDo
	Joins(fields ...field.RelationField) IPaymentLogDo
	Preload(fields ...field.RelationField) IPaymentLogDo
	FirstOrInit() (*model.PaymentLog, error)
	FirstOrCreate() (*model.PaymentLog, error)
	FindByPage(offset int, limit int) (result []*model.PaymentLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByUserId(userId uint32) (result []*model.User, err error)
}

// GetByUserId get user by user id
//
// SELECT * FROM @@table WHERE user_id = @userId and deleted_at is null
func (p paymentLogDo) GetByUserId(userId uint32) (result []*model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userId)
	generateSQL.WriteString("SELECT * FROM payment_log WHERE user_id = ? and deleted_at is null ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p paymentLogDo) Debug() IPaymentLogDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentLogDo) WithContext(ctx context.Context) IPaymentLogDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentLogDo) ReadDB() IPaymentLogDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentLogDo) WriteDB() IPaymentLogDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentLogDo) Session(config *gorm.Session) IPaymentLogDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentLogDo) Clauses(conds ...clause.Expression) IPaymentLogDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentLogDo) Returning(value interface{}, columns ...string) IPaymentLogDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentLogDo) Not(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentLogDo) Or(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentLogDo) Select(conds ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentLogDo) Where(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentLogDo) Order(conds ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentLogDo) Distinct(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentLogDo) Omit(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentLogDo) Join(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentLogDo) Group(cols ...field.Expr) IPaymentLogDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentLogDo) Having(conds ...gen.Condition) IPaymentLogDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentLogDo) Limit(limit int) IPaymentLogDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentLogDo) Offset(offset int) IPaymentLogDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentLogDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentLogDo) Unscoped() IPaymentLogDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentLogDo) Create(values ...*model.PaymentLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentLogDo) CreateInBatches(values []*model.PaymentLog, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentLogDo) Save(values ...*model.PaymentLog) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentLogDo) First() (*model.PaymentLog, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Take() (*model.PaymentLog, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Last() (*model.PaymentLog, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) Find() ([]*model.PaymentLog, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentLog), err
}

func (p paymentLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentLog, err error) {
	buf := make([]*model.PaymentLog, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentLogDo) FindInBatches(result *[]*model.PaymentLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentLogDo) Attrs(attrs ...field.AssignExpr) IPaymentLogDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentLogDo) Assign(attrs ...field.AssignExpr) IPaymentLogDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentLogDo) Joins(fields ...field.RelationField) IPaymentLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentLogDo) Preload(fields ...field.RelationField) IPaymentLogDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentLogDo) FirstOrInit() (*model.PaymentLog, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) FirstOrCreate() (*model.PaymentLog, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentLog), nil
	}
}

func (p paymentLogDo) FindByPage(offset int, limit int) (result []*model.PaymentLog, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentLogDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentLogDo) Delete(models ...*model.PaymentLog) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentLogDo) withDO(do gen.Dao) *paymentLogDo {
	p.DO = *do.(*gen.DO)
	return p
}
