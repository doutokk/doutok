// Code generated by hertz generator.

package order

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/doutokk/doutok/app/order/biz/dal/query"
	"github.com/doutokk/doutok/app/order/biz/service"
	"github.com/doutokk/doutok/common/utils"
	"github.com/doutokk/doutok/rpc_gen/kitex_gen/cart"
	"github.com/doutokk/doutok/rpc_gen/kitex_gen/order"
)

// PlaceOrder .
// @router /order [POST]
func PlaceOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PlaceOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// todo:这里应该做统一化的处理，userId不应该用传进来的
	req.UserId = uint32(utils.GetUserIdRequest(c))

	service := service.NewPlaceOrderService(ctx)
	resp, err := service.Run(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ListOrder .
// @router /order [GET]
func ListOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ListOrderReq
	err = c.BindAndValidate(&req)
	req.UserId = uint32(utils.GetUserIdRequest(c))
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	service := service.NewListOrderService(ctx)
	resp, err := service.Run(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetOrder 给前端展示订单详情 todo:这里可以抽离代码，listorder哪
// @router /order/:id [GET]
func GetOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderReq
	utils.BindParamsToStruct(c, &req)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId := utils.GetUserIdRequest(c)

	o := query.Q.Order
	oi := query.Q.OrderItem
	oneOrder, err := o.Where(o.OrderID.Eq(req.Id)).Where(o.UserID.Eq(uint32(userId))).First()

	orderItems, err := oi.Where(oi.OrderID.Eq(oneOrder.OrderID)).Find()
	orderItemsResp := make([]*order.OrderItem, 1)
	for _, orderItem := range orderItems {

		if orderItem == nil {
			continue
		}

		orderItemsResp = append(orderItemsResp, &order.OrderItem{
			Item: &cart.CartItem{
				ProductId: orderItem.ProductID,
				Quantity:  orderItem.Quantity,
			},
			Cost: float32(orderItem.Cost),
		})
	}
	resp := new(order.GetOrderResp)
	resp.Order = &order.Order{
		OrderId:      oneOrder.OrderID,
		UserId:       oneOrder.UserID,
		UserCurrency: oneOrder.UserCurrency,
		Email:        oneOrder.Email,
		Address: &order.Address{
			StreetAddress: oneOrder.StreetAddress,
			City:          oneOrder.City,
			State:         oneOrder.State,
			Country:       oneOrder.Country,
			ZipCode:       oneOrder.ZipCode,
		},
		OrderItems: orderItemsResp,
	}

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}
