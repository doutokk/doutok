// Code generated by hertz generator.

package order

import (
	"context"
	"github.com/doutokk/doutok/app/order/biz/service"
	"github.com/doutokk/doutok/common/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	order "github.com/doutokk/doutok/rpc_gen/kitex_gen/order"
)

// PlaceOrder .
// @router /order [POST]
func PlaceOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.PlaceOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	service := service.NewPlaceOrderService(ctx)
	resp, err := service.Run(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// ListOrder .
// @router /order [GET]
func ListOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.ListOrderReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	service := service.NewListOrderService(ctx)
	resp, err := service.Run(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// GetOrder .
// @router /order/:id [GET]
func GetOrder(ctx context.Context, c *app.RequestContext) {
	var err error
	var req order.GetOrderReq
	utils.BindParamsToStruct(c, &req)
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(order.GetOrderResp)

	c.JSON(consts.StatusOK, resp)
}
