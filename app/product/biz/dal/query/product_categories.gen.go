// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/doutokk/doutok/app/product/biz/dal/model"
)

func newProductCategory(db *gorm.DB, opts ...gen.DOOption) productCategory {
	_productCategory := productCategory{}

	_productCategory.productCategoryDo.UseDB(db, opts...)
	_productCategory.productCategoryDo.UseModel(&model.ProductCategory{})

	tableName := _productCategory.productCategoryDo.TableName()
	_productCategory.ALL = field.NewAsterisk(tableName)
	_productCategory.ID = field.NewUint(tableName, "id")
	_productCategory.CreatedAt = field.NewTime(tableName, "created_at")
	_productCategory.UpdatedAt = field.NewTime(tableName, "updated_at")
	_productCategory.DeletedAt = field.NewField(tableName, "deleted_at")
	_productCategory.Name = field.NewString(tableName, "name")
	_productCategory.Products = productCategoryManyToManyProducts{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Products", "model.Product"),
		Categories: struct {
			field.RelationField
			Products struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Products.Categories", "model.ProductCategory"),
			Products: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Products.Categories.Products", "model.Product"),
			},
		},
	}

	_productCategory.fillFieldMap()

	return _productCategory
}

type productCategory struct {
	productCategoryDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Products  productCategoryManyToManyProducts

	fieldMap map[string]field.Expr
}

func (p productCategory) Table(newTableName string) *productCategory {
	p.productCategoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productCategory) As(alias string) *productCategory {
	p.productCategoryDo.DO = *(p.productCategoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *productCategory) updateTableName(table string) *productCategory {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Name = field.NewString(table, "name")

	p.fillFieldMap()

	return p
}

func (p *productCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productCategory) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["name"] = p.Name

}

func (p productCategory) clone(db *gorm.DB) productCategory {
	p.productCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productCategory) replaceDB(db *gorm.DB) productCategory {
	p.productCategoryDo.ReplaceDB(db)
	return p
}

type productCategoryManyToManyProducts struct {
	db *gorm.DB

	field.RelationField

	Categories struct {
		field.RelationField
		Products struct {
			field.RelationField
		}
	}
}

func (a productCategoryManyToManyProducts) Where(conds ...field.Expr) *productCategoryManyToManyProducts {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a productCategoryManyToManyProducts) WithContext(ctx context.Context) *productCategoryManyToManyProducts {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a productCategoryManyToManyProducts) Session(session *gorm.Session) *productCategoryManyToManyProducts {
	a.db = a.db.Session(session)
	return &a
}

func (a productCategoryManyToManyProducts) Model(m *model.ProductCategory) *productCategoryManyToManyProductsTx {
	return &productCategoryManyToManyProductsTx{a.db.Model(m).Association(a.Name())}
}

type productCategoryManyToManyProductsTx struct{ tx *gorm.Association }

func (a productCategoryManyToManyProductsTx) Find() (result []*model.Product, err error) {
	return result, a.tx.Find(&result)
}

func (a productCategoryManyToManyProductsTx) Append(values ...*model.Product) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a productCategoryManyToManyProductsTx) Replace(values ...*model.Product) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a productCategoryManyToManyProductsTx) Delete(values ...*model.Product) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a productCategoryManyToManyProductsTx) Clear() error {
	return a.tx.Clear()
}

func (a productCategoryManyToManyProductsTx) Count() int64 {
	return a.tx.Count()
}

type productCategoryDo struct{ gen.DO }

type IProductCategoryDo interface {
	gen.SubQuery
	Debug() IProductCategoryDo
	WithContext(ctx context.Context) IProductCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductCategoryDo
	WriteDB() IProductCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProductCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProductCategoryDo
	Not(conds ...gen.Condition) IProductCategoryDo
	Or(conds ...gen.Condition) IProductCategoryDo
	Select(conds ...field.Expr) IProductCategoryDo
	Where(conds ...gen.Condition) IProductCategoryDo
	Order(conds ...field.Expr) IProductCategoryDo
	Distinct(cols ...field.Expr) IProductCategoryDo
	Omit(cols ...field.Expr) IProductCategoryDo
	Join(table schema.Tabler, on ...field.Expr) IProductCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductCategoryDo
	Group(cols ...field.Expr) IProductCategoryDo
	Having(conds ...gen.Condition) IProductCategoryDo
	Limit(limit int) IProductCategoryDo
	Offset(offset int) IProductCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCategoryDo
	Unscoped() IProductCategoryDo
	Create(values ...*model.ProductCategory) error
	CreateInBatches(values []*model.ProductCategory, batchSize int) error
	Save(values ...*model.ProductCategory) error
	First() (*model.ProductCategory, error)
	Take() (*model.ProductCategory, error)
	Last() (*model.ProductCategory, error)
	Find() ([]*model.ProductCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductCategory, err error)
	FindInBatches(result *[]*model.ProductCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProductCategoryDo
	Assign(attrs ...field.AssignExpr) IProductCategoryDo
	Joins(fields ...field.RelationField) IProductCategoryDo
	Preload(fields ...field.RelationField) IProductCategoryDo
	FirstOrInit() (*model.ProductCategory, error)
	FirstOrCreate() (*model.ProductCategory, error)
	FindByPage(offset int, limit int) (result []*model.ProductCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByUserId(userId uint32) (result []*model.Product, err error)
}

// GetByUserId get user by user id
//
// SELECT * FROM @@table WHERE user_id = @userId and deleted_at is null
func (p productCategoryDo) GetByUserId(userId uint32) (result []*model.Product, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, userId)
	generateSQL.WriteString("SELECT * FROM product_categories WHERE user_id = ? and deleted_at is null ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p productCategoryDo) Debug() IProductCategoryDo {
	return p.withDO(p.DO.Debug())
}

func (p productCategoryDo) WithContext(ctx context.Context) IProductCategoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productCategoryDo) ReadDB() IProductCategoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p productCategoryDo) WriteDB() IProductCategoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p productCategoryDo) Session(config *gorm.Session) IProductCategoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p productCategoryDo) Clauses(conds ...clause.Expression) IProductCategoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productCategoryDo) Returning(value interface{}, columns ...string) IProductCategoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productCategoryDo) Not(conds ...gen.Condition) IProductCategoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productCategoryDo) Or(conds ...gen.Condition) IProductCategoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productCategoryDo) Select(conds ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productCategoryDo) Where(conds ...gen.Condition) IProductCategoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productCategoryDo) Order(conds ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productCategoryDo) Distinct(cols ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productCategoryDo) Omit(cols ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productCategoryDo) Join(table schema.Tabler, on ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productCategoryDo) Group(cols ...field.Expr) IProductCategoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productCategoryDo) Having(conds ...gen.Condition) IProductCategoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productCategoryDo) Limit(limit int) IProductCategoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productCategoryDo) Offset(offset int) IProductCategoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProductCategoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productCategoryDo) Unscoped() IProductCategoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productCategoryDo) Create(values ...*model.ProductCategory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productCategoryDo) CreateInBatches(values []*model.ProductCategory, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productCategoryDo) Save(values ...*model.ProductCategory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productCategoryDo) First() (*model.ProductCategory, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCategory), nil
	}
}

func (p productCategoryDo) Take() (*model.ProductCategory, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCategory), nil
	}
}

func (p productCategoryDo) Last() (*model.ProductCategory, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCategory), nil
	}
}

func (p productCategoryDo) Find() ([]*model.ProductCategory, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductCategory), err
}

func (p productCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProductCategory, err error) {
	buf := make([]*model.ProductCategory, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productCategoryDo) FindInBatches(result *[]*model.ProductCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productCategoryDo) Attrs(attrs ...field.AssignExpr) IProductCategoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productCategoryDo) Assign(attrs ...field.AssignExpr) IProductCategoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productCategoryDo) Joins(fields ...field.RelationField) IProductCategoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productCategoryDo) Preload(fields ...field.RelationField) IProductCategoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productCategoryDo) FirstOrInit() (*model.ProductCategory, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCategory), nil
	}
}

func (p productCategoryDo) FirstOrCreate() (*model.ProductCategory, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductCategory), nil
	}
}

func (p productCategoryDo) FindByPage(offset int, limit int) (result []*model.ProductCategory, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productCategoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productCategoryDo) Delete(models ...*model.ProductCategory) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productCategoryDo) withDO(do gen.Dao) *productCategoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
