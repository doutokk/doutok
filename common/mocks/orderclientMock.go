// Code generated by MockGen. DO NOT EDIT.
// Source: ../../rpc_gen/kitex_gen/order/orderservice/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/doutokk/doutok/rpc_gen/kitex_gen/order"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "github.com/golang/mock/gomock"
)

// MockorderClient is a mock of Client interface.
type MockorderClient struct {
	ctrl     *gomock.Controller
	recorder *MockorderClientMockRecorder
}

// MockorderClientMockRecorder is the mock recorder for MockorderClient.
type MockorderClientMockRecorder struct {
	mock *MockorderClient
}

// NewMockorderClient creates a new mock instance.
func NewMockorderClient(ctrl *gomock.Controller) *MockorderClient {
	mock := &MockorderClient{ctrl: ctrl}
	mock.recorder = &MockorderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderClient) EXPECT() *MockorderClientMockRecorder {
	return m.recorder
}

// ListOrder mocks base method.
func (m *MockorderClient) ListOrder(ctx context.Context, Req *order.ListOrderReq, callOptions ...callopt.Option) (*order.ListOrderResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOrder", varargs...)
	ret0, _ := ret[0].(*order.ListOrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder.
func (mr *MockorderClientMockRecorder) ListOrder(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockorderClient)(nil).ListOrder), varargs...)
}

// MarkOrderPaid mocks base method.
func (m *MockorderClient) MarkOrderPaid(ctx context.Context, Req *order.MarkOrderPaidReq, callOptions ...callopt.Option) (*order.MarkOrderPaidResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkOrderPaid", varargs...)
	ret0, _ := ret[0].(*order.MarkOrderPaidResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkOrderPaid indicates an expected call of MarkOrderPaid.
func (mr *MockorderClientMockRecorder) MarkOrderPaid(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOrderPaid", reflect.TypeOf((*MockorderClient)(nil).MarkOrderPaid), varargs...)
}

// PlaceOrder mocks base method.
func (m *MockorderClient) PlaceOrder(ctx context.Context, Req *order.PlaceOrderReq, callOptions ...callopt.Option) (*order.PlaceOrderResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PlaceOrder", varargs...)
	ret0, _ := ret[0].(*order.PlaceOrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockorderClientMockRecorder) PlaceOrder(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockorderClient)(nil).PlaceOrder), varargs...)
}
