// Code generated by MockGen. DO NOT EDIT.
// Source: ../../rpc_gen/kitex_gen/payment/paymentservice/client.go
//
// Generated by this command:
//
//	mockgen -source=../../rpc_gen/kitex_gen/payment/paymentservice/client.go -destination=../../common/mocks/paymentclientMock.go -package=mocks -mock_names Client=MockpaymentClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	payment "github.com/doutokk/doutok/rpc_gen/kitex_gen/payment"
	gomock "go.uber.org/mock/gomock"
)

// MockpaymentClient is a mock of Client interface.
type MockpaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockpaymentClientMockRecorder
	isgomock struct{}
}

// MockpaymentClientMockRecorder is the mock recorder for MockpaymentClient.
type MockpaymentClientMockRecorder struct {
	mock *MockpaymentClient
}

// NewMockpaymentClient creates a new mock instance.
func NewMockpaymentClient(ctrl *gomock.Controller) *MockpaymentClient {
	mock := &MockpaymentClient{ctrl: ctrl}
	mock.recorder = &MockpaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpaymentClient) EXPECT() *MockpaymentClientMockRecorder {
	return m.recorder
}

// CallBack mocks base method.
func (m *MockpaymentClient) CallBack(ctx context.Context, Req *payment.CallBackReq, callOptions ...callopt.Option) (*payment.AlipayCallbackNotificationResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallBack", varargs...)
	ret0, _ := ret[0].(*payment.AlipayCallbackNotificationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallBack indicates an expected call of CallBack.
func (mr *MockpaymentClientMockRecorder) CallBack(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBack", reflect.TypeOf((*MockpaymentClient)(nil).CallBack), varargs...)
}

// Charge mocks base method.
func (m *MockpaymentClient) Charge(ctx context.Context, Req *payment.ChargeReq, callOptions ...callopt.Option) (*payment.ChargeResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Charge", varargs...)
	ret0, _ := ret[0].(*payment.ChargeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charge indicates an expected call of Charge.
func (mr *MockpaymentClientMockRecorder) Charge(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charge", reflect.TypeOf((*MockpaymentClient)(nil).Charge), varargs...)
}

// GetOrderPayemntStatus mocks base method.
func (m *MockpaymentClient) GetOrderPayemntStatus(ctx context.Context, Req *payment.GetOrderPayemntStatusReq, callOptions ...callopt.Option) (*payment.GetOrderPayemntStatusResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrderPayemntStatus", varargs...)
	ret0, _ := ret[0].(*payment.GetOrderPayemntStatusResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderPayemntStatus indicates an expected call of GetOrderPayemntStatus.
func (mr *MockpaymentClientMockRecorder) GetOrderPayemntStatus(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderPayemntStatus", reflect.TypeOf((*MockpaymentClient)(nil).GetOrderPayemntStatus), varargs...)
}

// StartPayment mocks base method.
func (m *MockpaymentClient) StartPayment(ctx context.Context, Req *payment.StartPaymentReq, callOptions ...callopt.Option) (*payment.StartPaymentResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartPayment", varargs...)
	ret0, _ := ret[0].(*payment.StartPaymentResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartPayment indicates an expected call of StartPayment.
func (mr *MockpaymentClientMockRecorder) StartPayment(ctx, Req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPayment", reflect.TypeOf((*MockpaymentClient)(nil).StartPayment), varargs...)
}
