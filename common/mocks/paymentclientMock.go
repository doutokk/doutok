// Code generated by MockGen. DO NOT EDIT.
// Source: ../../rpc_gen/kitex_gen/payment/paymentservice/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	payment "github.com/doutokk/doutok/app/payment/kitex_gen/payment"
	gomock "github.com/golang/mock/gomock"
)

// MockpaymentClient is a mock of Client interface.
type MockpaymentClient struct {
	ctrl     *gomock.Controller
	recorder *MockpaymentClientMockRecorder
}

// MockpaymentClientMockRecorder is the mock recorder for MockpaymentClient.
type MockpaymentClientMockRecorder struct {
	mock *MockpaymentClient
}

// NewMockpaymentClient creates a new mock instance.
func NewMockpaymentClient(ctrl *gomock.Controller) *MockpaymentClient {
	mock := &MockpaymentClient{ctrl: ctrl}
	mock.recorder = &MockpaymentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpaymentClient) EXPECT() *MockpaymentClientMockRecorder {
	return m.recorder
}

// Charge mocks base method.
func (m *MockpaymentClient) Charge(ctx context.Context, Req *payment.ChargeReq, callOptions ...callopt.Option) (*payment.ChargeResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Charge", varargs...)
	ret0, _ := ret[0].(*payment.ChargeResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Charge indicates an expected call of Charge.
func (mr *MockpaymentClientMockRecorder) Charge(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Charge", reflect.TypeOf((*MockpaymentClient)(nil).Charge), varargs...)
}
