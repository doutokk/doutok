// Code generated by MockGen. DO NOT EDIT.
// Source: ../../rpc_gen/kitex_gen/cart/cartservice/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	cart "github.com/doutokk/doutok/rpc_gen/kitex_gen/cart"
	gomock "github.com/golang/mock/gomock"
)

// MockcartClient is a mock of Client interface.
type MockcartClient struct {
	ctrl     *gomock.Controller
	recorder *MockcartClientMockRecorder
}

// MockcartClientMockRecorder is the mock recorder for MockcartClient.
type MockcartClientMockRecorder struct {
	mock *MockcartClient
}

// NewMockcartClient creates a new mock instance.
func NewMockcartClient(ctrl *gomock.Controller) *MockcartClient {
	mock := &MockcartClient{ctrl: ctrl}
	mock.recorder = &MockcartClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcartClient) EXPECT() *MockcartClientMockRecorder {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockcartClient) AddItem(ctx context.Context, Req *cart.AddItemReq, callOptions ...callopt.Option) (*cart.AddItemResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddItem", varargs...)
	ret0, _ := ret[0].(*cart.AddItemResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItem indicates an expected call of AddItem.
func (mr *MockcartClientMockRecorder) AddItem(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockcartClient)(nil).AddItem), varargs...)
}

// EmptyCart mocks base method.
func (m *MockcartClient) EmptyCart(ctx context.Context, Req *cart.EmptyCartReq, callOptions ...callopt.Option) (*cart.EmptyCartResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EmptyCart", varargs...)
	ret0, _ := ret[0].(*cart.EmptyCartResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EmptyCart indicates an expected call of EmptyCart.
func (mr *MockcartClientMockRecorder) EmptyCart(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyCart", reflect.TypeOf((*MockcartClient)(nil).EmptyCart), varargs...)
}

// GetCart mocks base method.
func (m *MockcartClient) GetCart(ctx context.Context, Req *cart.GetCartReq, callOptions ...callopt.Option) (*cart.GetCartResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, Req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCart", varargs...)
	ret0, _ := ret[0].(*cart.GetCartResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockcartClientMockRecorder) GetCart(ctx, Req interface{}, callOptions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, Req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockcartClient)(nil).GetCart), varargs...)
}
