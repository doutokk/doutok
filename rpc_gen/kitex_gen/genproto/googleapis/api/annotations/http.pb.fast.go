// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package annotations

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Http) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Http[number], err)
}

func (x *Http) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v HttpRule
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Rules = append(x.Rules, &v)
	return offset, nil
}

func (x *Http) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FullyDecodeReservedExpansion, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *HttpRule) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HttpRule[number], err)
}

func (x *HttpRule) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Selector, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Get
	x.Pattern = &ov
	ov.Get, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Put
	x.Pattern = &ov
	ov.Put, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Post
	x.Pattern = &ov
	ov.Post, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Delete
	x.Pattern = &ov
	ov.Delete, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Patch
	x.Pattern = &ov
	ov.Patch, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Body, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HttpRule) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var ov HttpRule_Custom
	x.Pattern = &ov
	var v CustomHttpPattern
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	ov.Custom = &v
	return offset, nil
}

func (x *HttpRule) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v HttpRule
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.AdditionalBindings = append(x.AdditionalBindings, &v)
	return offset, nil
}

func (x *HttpRule) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.ResponseBody, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CustomHttpPattern) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CustomHttpPattern[number], err)
}

func (x *CustomHttpPattern) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Kind, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CustomHttpPattern) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Path, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Http) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Http) fastWriteField1(buf []byte) (offset int) {
	if x.Rules == nil {
		return offset
	}
	for i := range x.GetRules() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetRules()[i])
	}
	return offset
}

func (x *Http) fastWriteField2(buf []byte) (offset int) {
	if !x.FullyDecodeReservedExpansion {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetFullyDecodeReservedExpansion())
	return offset
}

func (x *HttpRule) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	return offset
}

func (x *HttpRule) fastWriteField1(buf []byte) (offset int) {
	if x.Selector == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetSelector())
	return offset
}

func (x *HttpRule) fastWriteField2(buf []byte) (offset int) {
	if x.GetGet() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetGet())
	return offset
}

func (x *HttpRule) fastWriteField3(buf []byte) (offset int) {
	if x.GetPut() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetPut())
	return offset
}

func (x *HttpRule) fastWriteField4(buf []byte) (offset int) {
	if x.GetPost() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetPost())
	return offset
}

func (x *HttpRule) fastWriteField5(buf []byte) (offset int) {
	if x.GetDelete() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetDelete())
	return offset
}

func (x *HttpRule) fastWriteField6(buf []byte) (offset int) {
	if x.GetPatch() == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetPatch())
	return offset
}

func (x *HttpRule) fastWriteField7(buf []byte) (offset int) {
	if x.Body == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetBody())
	return offset
}

func (x *HttpRule) fastWriteField8(buf []byte) (offset int) {
	if x.GetCustom() == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetCustom())
	return offset
}

func (x *HttpRule) fastWriteField11(buf []byte) (offset int) {
	if x.AdditionalBindings == nil {
		return offset
	}
	for i := range x.GetAdditionalBindings() {
		offset += fastpb.WriteMessage(buf[offset:], 11, x.GetAdditionalBindings()[i])
	}
	return offset
}

func (x *HttpRule) fastWriteField12(buf []byte) (offset int) {
	if x.ResponseBody == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetResponseBody())
	return offset
}

func (x *CustomHttpPattern) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *CustomHttpPattern) fastWriteField1(buf []byte) (offset int) {
	if x.Kind == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetKind())
	return offset
}

func (x *CustomHttpPattern) fastWriteField2(buf []byte) (offset int) {
	if x.Path == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPath())
	return offset
}

func (x *Http) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Http) sizeField1() (n int) {
	if x.Rules == nil {
		return n
	}
	for i := range x.GetRules() {
		n += fastpb.SizeMessage(1, x.GetRules()[i])
	}
	return n
}

func (x *Http) sizeField2() (n int) {
	if !x.FullyDecodeReservedExpansion {
		return n
	}
	n += fastpb.SizeBool(2, x.GetFullyDecodeReservedExpansion())
	return n
}

func (x *HttpRule) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField11()
	n += x.sizeField12()
	return n
}

func (x *HttpRule) sizeField1() (n int) {
	if x.Selector == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetSelector())
	return n
}

func (x *HttpRule) sizeField2() (n int) {
	if x.GetGet() == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetGet())
	return n
}

func (x *HttpRule) sizeField3() (n int) {
	if x.GetPut() == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetPut())
	return n
}

func (x *HttpRule) sizeField4() (n int) {
	if x.GetPost() == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetPost())
	return n
}

func (x *HttpRule) sizeField5() (n int) {
	if x.GetDelete() == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetDelete())
	return n
}

func (x *HttpRule) sizeField6() (n int) {
	if x.GetPatch() == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetPatch())
	return n
}

func (x *HttpRule) sizeField7() (n int) {
	if x.Body == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetBody())
	return n
}

func (x *HttpRule) sizeField8() (n int) {
	if x.GetCustom() == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetCustom())
	return n
}

func (x *HttpRule) sizeField11() (n int) {
	if x.AdditionalBindings == nil {
		return n
	}
	for i := range x.GetAdditionalBindings() {
		n += fastpb.SizeMessage(11, x.GetAdditionalBindings()[i])
	}
	return n
}

func (x *HttpRule) sizeField12() (n int) {
	if x.ResponseBody == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetResponseBody())
	return n
}

func (x *CustomHttpPattern) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *CustomHttpPattern) sizeField1() (n int) {
	if x.Kind == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetKind())
	return n
}

func (x *CustomHttpPattern) sizeField2() (n int) {
	if x.Path == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPath())
	return n
}

var fieldIDToName_Http = map[int32]string{
	1: "Rules",
	2: "FullyDecodeReservedExpansion",
}

var fieldIDToName_HttpRule = map[int32]string{
	1:  "Selector",
	2:  "Get",
	3:  "Put",
	4:  "Post",
	5:  "Delete",
	6:  "Patch",
	7:  "Body",
	8:  "Custom",
	11: "AdditionalBindings",
	12: "ResponseBody",
}

var fieldIDToName_CustomHttpPattern = map[int32]string{
	1: "Kind",
	2: "Path",
}
