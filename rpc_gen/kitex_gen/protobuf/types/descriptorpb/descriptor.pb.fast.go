// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package descriptorpb

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *FileDescriptorSet) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileDescriptorSet[number], err)
}

func (x *FileDescriptorSet) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FileDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.File = append(x.File, &v)
	return offset, nil
}

func (x *FileDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileDescriptorProto[number], err)
}

func (x *FileDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Package, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Dependency = append(x.Dependency, v)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v DescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.MessageType = append(x.MessageType, &v)
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v EnumDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.EnumType = append(x.EnumType, &v)
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v ServiceDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Service = append(x.Service, &v)
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v FieldDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Extension = append(x.Extension, &v)
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v FileOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v SourceCodeInfo
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SourceCodeInfo = &v
	return offset, nil
}

func (x *FileDescriptorProto) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PublicDependency = append(x.PublicDependency, v)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.WeakDependency = append(x.WeakDependency, v)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.Syntax, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileDescriptorProto) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Edition = Edition(v)
	return offset, nil
}

func (x *DescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DescriptorProto[number], err)
}

func (x *DescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FieldDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Field = append(x.Field, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v DescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.NestedType = append(x.NestedType, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v EnumDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.EnumType = append(x.EnumType, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v DescriptorProto_ExtensionRange
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ExtensionRange = append(x.ExtensionRange, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v FieldDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Extension = append(x.Extension, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v MessageOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *DescriptorProto) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v OneofDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.OneofDecl = append(x.OneofDecl, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v DescriptorProto_ReservedRange
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ReservedRange = append(x.ReservedRange, &v)
	return offset, nil
}

func (x *DescriptorProto) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ReservedName = append(x.ReservedName, v)
	return offset, err
}

func (x *ExtensionRangeOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 50:
		offset, err = x.fastReadField50(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExtensionRangeOptions[number], err)
}

func (x *ExtensionRangeOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v ExtensionRangeOptions_Declaration
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Declaration = append(x.Declaration, &v)
	return offset, nil
}

func (x *ExtensionRangeOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Verification = ExtensionRangeOptions_VerificationState(v)
	return offset, nil
}

func (x *ExtensionRangeOptions) fastReadField50(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *ExtensionRangeOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *FieldDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FieldDescriptorProto[number], err)
}

func (x *FieldDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Extendee, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Number, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Label = FieldDescriptorProto_Label(v)
	return offset, nil
}

func (x *FieldDescriptorProto) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Type = FieldDescriptorProto_Type(v)
	return offset, nil
}

func (x *FieldDescriptorProto) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.TypeName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DefaultValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	var v FieldOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *FieldDescriptorProto) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.OneofIndex, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.JsonName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldDescriptorProto) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.Proto3Optional, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *OneofDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OneofDescriptorProto[number], err)
}

func (x *OneofDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *OneofDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v OneofOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *EnumDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumDescriptorProto[number], err)
}

func (x *EnumDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EnumDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v EnumValueDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Value = append(x.Value, &v)
	return offset, nil
}

func (x *EnumDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v EnumOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *EnumDescriptorProto) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v EnumDescriptorProto_EnumReservedRange
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ReservedRange = append(x.ReservedRange, &v)
	return offset, nil
}

func (x *EnumDescriptorProto) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ReservedName = append(x.ReservedName, v)
	return offset, err
}

func (x *EnumValueDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumValueDescriptorProto[number], err)
}

func (x *EnumValueDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *EnumValueDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Number, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *EnumValueDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v EnumValueOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *ServiceDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ServiceDescriptorProto[number], err)
}

func (x *ServiceDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ServiceDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v MethodDescriptorProto
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Method = append(x.Method, &v)
	return offset, nil
}

func (x *ServiceDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v ServiceOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *MethodDescriptorProto) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MethodDescriptorProto[number], err)
}

func (x *MethodDescriptorProto) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MethodDescriptorProto) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.InputType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MethodDescriptorProto) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.OutputType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *MethodDescriptorProto) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v MethodOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *MethodDescriptorProto) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ClientStreaming, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MethodDescriptorProto) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.ServerStreaming, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 23:
		offset, err = x.fastReadField23(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 27:
		offset, err = x.fastReadField27(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 31:
		offset, err = x.fastReadField31(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 36:
		offset, err = x.fastReadField36(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 37:
		offset, err = x.fastReadField37(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 39:
		offset, err = x.fastReadField39(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 40:
		offset, err = x.fastReadField40(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 41:
		offset, err = x.fastReadField41(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 44:
		offset, err = x.fastReadField44(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 45:
		offset, err = x.fastReadField45(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 50:
		offset, err = x.fastReadField50(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FileOptions[number], err)
}

func (x *FileOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.JavaPackage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.JavaOuterClassname, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.OptimizeFor = FileOptions_OptimizeMode(v)
	return offset, nil
}

func (x *FileOptions) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.JavaMultipleFiles, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.GoPackage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.CcGenericServices, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	x.JavaGenericServices, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	x.PyGenericServices, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	x.JavaGenerateEqualsAndHash, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField23(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField27(buf []byte, _type int8) (offset int, err error) {
	x.JavaStringCheckUtf8, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField31(buf []byte, _type int8) (offset int, err error) {
	x.CcEnableArenas, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField36(buf []byte, _type int8) (offset int, err error) {
	x.ObjcClassPrefix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField37(buf []byte, _type int8) (offset int, err error) {
	x.CsharpNamespace, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField39(buf []byte, _type int8) (offset int, err error) {
	x.SwiftPrefix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField40(buf []byte, _type int8) (offset int, err error) {
	x.PhpClassPrefix, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField41(buf []byte, _type int8) (offset int, err error) {
	x.PhpNamespace, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField44(buf []byte, _type int8) (offset int, err error) {
	x.PhpMetadataNamespace, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField45(buf []byte, _type int8) (offset int, err error) {
	x.RubyPackage, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FileOptions) fastReadField50(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *FileOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *MessageOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MessageOptions[number], err)
}

func (x *MessageOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.MessageSetWireFormat, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MessageOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.NoStandardDescriptorAccessor, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MessageOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MessageOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.MapEntry, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MessageOptions) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.DeprecatedLegacyJsonFieldConflicts, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MessageOptions) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *MessageOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *FieldOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 19:
		offset, err = x.fastReadField19(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 20:
		offset, err = x.fastReadField20(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 21:
		offset, err = x.fastReadField21(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 22:
		offset, err = x.fastReadField22(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FieldOptions[number], err)
}

func (x *FieldOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Ctype = FieldOptions_CType(v)
	return offset, nil
}

func (x *FieldOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Packed, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Lazy, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Jstype = FieldOptions_JSType(v)
	return offset, nil
}

func (x *FieldOptions) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.Weak, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.UnverifiedLazy, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.DebugRedact, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FieldOptions) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Retention = FieldOptions_OptionRetention(v)
	return offset, nil
}

func (x *FieldOptions) fastReadField19(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Targets = append(x.Targets, FieldOptions_OptionTargetType(v))
	return offset, nil
}

func (x *FieldOptions) fastReadField20(buf []byte, _type int8) (offset int, err error) {
	var v FieldOptions_EditionDefault
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.EditionDefaults = append(x.EditionDefaults, &v)
	return offset, nil
}

func (x *FieldOptions) fastReadField21(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *FieldOptions) fastReadField22(buf []byte, _type int8) (offset int, err error) {
	var v FieldOptions_FeatureSupport
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FeatureSupport = &v
	return offset, nil
}

func (x *FieldOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *OneofOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_OneofOptions[number], err)
}

func (x *OneofOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *OneofOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *EnumOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumOptions[number], err)
}

func (x *EnumOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AllowAlias, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumOptions) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.DeprecatedLegacyJsonFieldConflicts, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumOptions) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *EnumOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *EnumValueOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumValueOptions[number], err)
}

func (x *EnumValueOptions) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumValueOptions) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *EnumValueOptions) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DebugRedact, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumValueOptions) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v FieldOptions_FeatureSupport
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FeatureSupport = &v
	return offset, nil
}

func (x *EnumValueOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *ServiceOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 33:
		offset, err = x.fastReadField33(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 34:
		offset, err = x.fastReadField34(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ServiceOptions[number], err)
}

func (x *ServiceOptions) fastReadField33(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ServiceOptions) fastReadField34(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *ServiceOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *MethodOptions) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 33:
		offset, err = x.fastReadField33(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 34:
		offset, err = x.fastReadField34(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 35:
		offset, err = x.fastReadField35(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 999:
		offset, err = x.fastReadField999(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_MethodOptions[number], err)
}

func (x *MethodOptions) fastReadField33(buf []byte, _type int8) (offset int, err error) {
	x.Deprecated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *MethodOptions) fastReadField34(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.IdempotencyLevel = MethodOptions_IdempotencyLevel(v)
	return offset, nil
}

func (x *MethodOptions) fastReadField35(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Features = &v
	return offset, nil
}

func (x *MethodOptions) fastReadField999(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.UninterpretedOption = append(x.UninterpretedOption, &v)
	return offset, nil
}

func (x *UninterpretedOption) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UninterpretedOption[number], err)
}

func (x *UninterpretedOption) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UninterpretedOption_NamePart
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Name = append(x.Name, &v)
	return offset, nil
}

func (x *UninterpretedOption) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.IdentifierValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UninterpretedOption) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.PositiveIntValue, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *UninterpretedOption) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.NegativeIntValue, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UninterpretedOption) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.DoubleValue, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *UninterpretedOption) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.StringValue, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UninterpretedOption) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.AggregateValue, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FeatureSet) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FeatureSet[number], err)
}

func (x *FeatureSet) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.FieldPresence = FeatureSet_FieldPresence(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EnumType = FeatureSet_EnumType(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.RepeatedFieldEncoding = FeatureSet_RepeatedFieldEncoding(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Utf8Validation = FeatureSet_Utf8Validation(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.MessageEncoding = FeatureSet_MessageEncoding(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.JsonFormat = FeatureSet_JsonFormat(v)
	return offset, nil
}

func (x *FeatureSet) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EnforceNamingStyle = FeatureSet_EnforceNamingStyle(v)
	return offset, nil
}

func (x *FeatureSetDefaults) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FeatureSetDefaults[number], err)
}

func (x *FeatureSetDefaults) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSetDefaults_FeatureSetEditionDefault
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Defaults = append(x.Defaults, &v)
	return offset, nil
}

func (x *FeatureSetDefaults) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.MinimumEdition = Edition(v)
	return offset, nil
}

func (x *FeatureSetDefaults) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.MaximumEdition = Edition(v)
	return offset, nil
}

func (x *SourceCodeInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SourceCodeInfo[number], err)
}

func (x *SourceCodeInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v SourceCodeInfo_Location
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Location = append(x.Location, &v)
	return offset, nil
}

func (x *GeneratedCodeInfo) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GeneratedCodeInfo[number], err)
}

func (x *GeneratedCodeInfo) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v GeneratedCodeInfo_Annotation
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Annotation = append(x.Annotation, &v)
	return offset, nil
}

func (x *DescriptorProto_ExtensionRange) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DescriptorProto_ExtensionRange[number], err)
}

func (x *DescriptorProto_ExtensionRange) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DescriptorProto_ExtensionRange) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DescriptorProto_ExtensionRange) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v ExtensionRangeOptions
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Options = &v
	return offset, nil
}

func (x *DescriptorProto_ReservedRange) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DescriptorProto_ReservedRange[number], err)
}

func (x *DescriptorProto_ReservedRange) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DescriptorProto_ReservedRange) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExtensionRangeOptions_Declaration) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExtensionRangeOptions_Declaration[number], err)
}

func (x *ExtensionRangeOptions_Declaration) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Number, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *ExtensionRangeOptions_Declaration) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.FullName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExtensionRangeOptions_Declaration) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Type, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ExtensionRangeOptions_Declaration) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Reserved, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ExtensionRangeOptions_Declaration) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Repeated, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *EnumDescriptorProto_EnumReservedRange) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_EnumDescriptorProto_EnumReservedRange[number], err)
}

func (x *EnumDescriptorProto_EnumReservedRange) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Start, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *EnumDescriptorProto_EnumReservedRange) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *FieldOptions_EditionDefault) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FieldOptions_EditionDefault[number], err)
}

func (x *FieldOptions_EditionDefault) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldOptions_EditionDefault) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Edition = Edition(v)
	return offset, nil
}

func (x *FieldOptions_FeatureSupport) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FieldOptions_FeatureSupport[number], err)
}

func (x *FieldOptions_FeatureSupport) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EditionIntroduced = Edition(v)
	return offset, nil
}

func (x *FieldOptions_FeatureSupport) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EditionDeprecated = Edition(v)
	return offset, nil
}

func (x *FieldOptions_FeatureSupport) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DeprecationWarning, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *FieldOptions_FeatureSupport) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.EditionRemoved = Edition(v)
	return offset, nil
}

func (x *UninterpretedOption_NamePart) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UninterpretedOption_NamePart[number], err)
}

func (x *UninterpretedOption_NamePart) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.NamePart, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UninterpretedOption_NamePart) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsExtension, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_FeatureSetDefaults_FeatureSetEditionDefault[number], err)
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Edition = Edition(v)
	return offset, nil
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.OverridableFeatures = &v
	return offset, nil
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v FeatureSet
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.FixedFeatures = &v
	return offset, nil
}

func (x *SourceCodeInfo_Location) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SourceCodeInfo_Location[number], err)
}

func (x *SourceCodeInfo_Location) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Path = append(x.Path, v)
			return offset, err
		})
	return offset, err
}

func (x *SourceCodeInfo_Location) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Span = append(x.Span, v)
			return offset, err
		})
	return offset, err
}

func (x *SourceCodeInfo_Location) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LeadingComments, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SourceCodeInfo_Location) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.TrailingComments, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SourceCodeInfo_Location) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.LeadingDetachedComments = append(x.LeadingDetachedComments, v)
	return offset, err
}

func (x *GeneratedCodeInfo_Annotation) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GeneratedCodeInfo_Annotation[number], err)
}

func (x *GeneratedCodeInfo_Annotation) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	offset, err = fastpb.ReadList(buf, _type,
		func(buf []byte, _type int8) (n int, err error) {
			var v int32
			v, offset, err = fastpb.ReadInt32(buf, _type)
			if err != nil {
				return offset, err
			}
			x.Path = append(x.Path, v)
			return offset, err
		})
	return offset, err
}

func (x *GeneratedCodeInfo_Annotation) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SourceFile, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GeneratedCodeInfo_Annotation) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Begin, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GeneratedCodeInfo_Annotation) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.End, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *GeneratedCodeInfo_Annotation) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Semantic = GeneratedCodeInfo_Annotation_Semantic(v)
	return offset, nil
}

func (x *FileDescriptorSet) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *FileDescriptorSet) fastWriteField1(buf []byte) (offset int) {
	if x.File == nil {
		return offset
	}
	for i := range x.GetFile() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFile()[i])
	}
	return offset
}

func (x *FileDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	return offset
}

func (x *FileDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *FileDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Package == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPackage())
	return offset
}

func (x *FileDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if len(x.Dependency) == 0 {
		return offset
	}
	for i := range x.GetDependency() {
		offset += fastpb.WriteString(buf[offset:], 3, x.GetDependency()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField4(buf []byte) (offset int) {
	if x.MessageType == nil {
		return offset
	}
	for i := range x.GetMessageType() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetMessageType()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField5(buf []byte) (offset int) {
	if x.EnumType == nil {
		return offset
	}
	for i := range x.GetEnumType() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetEnumType()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField6(buf []byte) (offset int) {
	if x.Service == nil {
		return offset
	}
	for i := range x.GetService() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetService()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField7(buf []byte) (offset int) {
	if x.Extension == nil {
		return offset
	}
	for i := range x.GetExtension() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetExtension()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField8(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetOptions())
	return offset
}

func (x *FileDescriptorProto) fastWriteField9(buf []byte) (offset int) {
	if x.SourceCodeInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 9, x.GetSourceCodeInfo())
	return offset
}

func (x *FileDescriptorProto) fastWriteField10(buf []byte) (offset int) {
	if len(x.PublicDependency) == 0 {
		return offset
	}
	for i := range x.GetPublicDependency() {
		offset += fastpb.WriteInt32(buf[offset:], 10, x.GetPublicDependency()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField11(buf []byte) (offset int) {
	if len(x.WeakDependency) == 0 {
		return offset
	}
	for i := range x.GetWeakDependency() {
		offset += fastpb.WriteInt32(buf[offset:], 11, x.GetWeakDependency()[i])
	}
	return offset
}

func (x *FileDescriptorProto) fastWriteField12(buf []byte) (offset int) {
	if x.Syntax == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 12, x.GetSyntax())
	return offset
}

func (x *FileDescriptorProto) fastWriteField14(buf []byte) (offset int) {
	if x.Edition == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 14, int32(x.GetEdition()))
	return offset
}

func (x *DescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	return offset
}

func (x *DescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *DescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Field == nil {
		return offset
	}
	for i := range x.GetField() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetField()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.NestedType == nil {
		return offset
	}
	for i := range x.GetNestedType() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetNestedType()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField4(buf []byte) (offset int) {
	if x.EnumType == nil {
		return offset
	}
	for i := range x.GetEnumType() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetEnumType()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField5(buf []byte) (offset int) {
	if x.ExtensionRange == nil {
		return offset
	}
	for i := range x.GetExtensionRange() {
		offset += fastpb.WriteMessage(buf[offset:], 5, x.GetExtensionRange()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField6(buf []byte) (offset int) {
	if x.Extension == nil {
		return offset
	}
	for i := range x.GetExtension() {
		offset += fastpb.WriteMessage(buf[offset:], 6, x.GetExtension()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField7(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 7, x.GetOptions())
	return offset
}

func (x *DescriptorProto) fastWriteField8(buf []byte) (offset int) {
	if x.OneofDecl == nil {
		return offset
	}
	for i := range x.GetOneofDecl() {
		offset += fastpb.WriteMessage(buf[offset:], 8, x.GetOneofDecl()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField9(buf []byte) (offset int) {
	if x.ReservedRange == nil {
		return offset
	}
	for i := range x.GetReservedRange() {
		offset += fastpb.WriteMessage(buf[offset:], 9, x.GetReservedRange()[i])
	}
	return offset
}

func (x *DescriptorProto) fastWriteField10(buf []byte) (offset int) {
	if len(x.ReservedName) == 0 {
		return offset
	}
	for i := range x.GetReservedName() {
		offset += fastpb.WriteString(buf[offset:], 10, x.GetReservedName()[i])
	}
	return offset
}

func (x *ExtensionRangeOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField50(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *ExtensionRangeOptions) fastWriteField2(buf []byte) (offset int) {
	if x.Declaration == nil {
		return offset
	}
	for i := range x.GetDeclaration() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetDeclaration()[i])
	}
	return offset
}

func (x *ExtensionRangeOptions) fastWriteField3(buf []byte) (offset int) {
	if x.Verification == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetVerification()))
	return offset
}

func (x *ExtensionRangeOptions) fastWriteField50(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 50, x.GetFeatures())
	return offset
}

func (x *ExtensionRangeOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *FieldDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	return offset
}

func (x *FieldDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Extendee == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetExtendee())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.Number == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetNumber())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField4(buf []byte) (offset int) {
	if x.Label == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetLabel()))
	return offset
}

func (x *FieldDescriptorProto) fastWriteField5(buf []byte) (offset int) {
	if x.Type == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetType()))
	return offset
}

func (x *FieldDescriptorProto) fastWriteField6(buf []byte) (offset int) {
	if x.TypeName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetTypeName())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField7(buf []byte) (offset int) {
	if x.DefaultValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetDefaultValue())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField8(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 8, x.GetOptions())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField9(buf []byte) (offset int) {
	if x.OneofIndex == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetOneofIndex())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField10(buf []byte) (offset int) {
	if x.JsonName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 10, x.GetJsonName())
	return offset
}

func (x *FieldDescriptorProto) fastWriteField17(buf []byte) (offset int) {
	if !x.Proto3Optional {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 17, x.GetProto3Optional())
	return offset
}

func (x *OneofDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *OneofDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *OneofDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetOptions())
	return offset
}

func (x *EnumDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *EnumDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *EnumDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Value == nil {
		return offset
	}
	for i := range x.GetValue() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetValue()[i])
	}
	return offset
}

func (x *EnumDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOptions())
	return offset
}

func (x *EnumDescriptorProto) fastWriteField4(buf []byte) (offset int) {
	if x.ReservedRange == nil {
		return offset
	}
	for i := range x.GetReservedRange() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetReservedRange()[i])
	}
	return offset
}

func (x *EnumDescriptorProto) fastWriteField5(buf []byte) (offset int) {
	if len(x.ReservedName) == 0 {
		return offset
	}
	for i := range x.GetReservedName() {
		offset += fastpb.WriteString(buf[offset:], 5, x.GetReservedName()[i])
	}
	return offset
}

func (x *EnumValueDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *EnumValueDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *EnumValueDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Number == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetNumber())
	return offset
}

func (x *EnumValueDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOptions())
	return offset
}

func (x *ServiceDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ServiceDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *ServiceDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.Method == nil {
		return offset
	}
	for i := range x.GetMethod() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetMethod()[i])
	}
	return offset
}

func (x *ServiceDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOptions())
	return offset
}

func (x *MethodDescriptorProto) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *MethodDescriptorProto) fastWriteField1(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetName())
	return offset
}

func (x *MethodDescriptorProto) fastWriteField2(buf []byte) (offset int) {
	if x.InputType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetInputType())
	return offset
}

func (x *MethodDescriptorProto) fastWriteField3(buf []byte) (offset int) {
	if x.OutputType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetOutputType())
	return offset
}

func (x *MethodDescriptorProto) fastWriteField4(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetOptions())
	return offset
}

func (x *MethodDescriptorProto) fastWriteField5(buf []byte) (offset int) {
	if !x.ClientStreaming {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetClientStreaming())
	return offset
}

func (x *MethodDescriptorProto) fastWriteField6(buf []byte) (offset int) {
	if !x.ServerStreaming {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetServerStreaming())
	return offset
}

func (x *FileOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField23(buf[offset:])
	offset += x.fastWriteField27(buf[offset:])
	offset += x.fastWriteField31(buf[offset:])
	offset += x.fastWriteField36(buf[offset:])
	offset += x.fastWriteField37(buf[offset:])
	offset += x.fastWriteField39(buf[offset:])
	offset += x.fastWriteField40(buf[offset:])
	offset += x.fastWriteField41(buf[offset:])
	offset += x.fastWriteField44(buf[offset:])
	offset += x.fastWriteField45(buf[offset:])
	offset += x.fastWriteField50(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *FileOptions) fastWriteField1(buf []byte) (offset int) {
	if x.JavaPackage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetJavaPackage())
	return offset
}

func (x *FileOptions) fastWriteField8(buf []byte) (offset int) {
	if x.JavaOuterClassname == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetJavaOuterClassname())
	return offset
}

func (x *FileOptions) fastWriteField9(buf []byte) (offset int) {
	if x.OptimizeFor == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, int32(x.GetOptimizeFor()))
	return offset
}

func (x *FileOptions) fastWriteField10(buf []byte) (offset int) {
	if !x.JavaMultipleFiles {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetJavaMultipleFiles())
	return offset
}

func (x *FileOptions) fastWriteField11(buf []byte) (offset int) {
	if x.GoPackage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetGoPackage())
	return offset
}

func (x *FileOptions) fastWriteField16(buf []byte) (offset int) {
	if !x.CcGenericServices {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 16, x.GetCcGenericServices())
	return offset
}

func (x *FileOptions) fastWriteField17(buf []byte) (offset int) {
	if !x.JavaGenericServices {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 17, x.GetJavaGenericServices())
	return offset
}

func (x *FileOptions) fastWriteField18(buf []byte) (offset int) {
	if !x.PyGenericServices {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 18, x.GetPyGenericServices())
	return offset
}

func (x *FileOptions) fastWriteField20(buf []byte) (offset int) {
	if !x.JavaGenerateEqualsAndHash {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 20, x.GetJavaGenerateEqualsAndHash())
	return offset
}

func (x *FileOptions) fastWriteField23(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 23, x.GetDeprecated())
	return offset
}

func (x *FileOptions) fastWriteField27(buf []byte) (offset int) {
	if !x.JavaStringCheckUtf8 {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 27, x.GetJavaStringCheckUtf8())
	return offset
}

func (x *FileOptions) fastWriteField31(buf []byte) (offset int) {
	if !x.CcEnableArenas {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 31, x.GetCcEnableArenas())
	return offset
}

func (x *FileOptions) fastWriteField36(buf []byte) (offset int) {
	if x.ObjcClassPrefix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 36, x.GetObjcClassPrefix())
	return offset
}

func (x *FileOptions) fastWriteField37(buf []byte) (offset int) {
	if x.CsharpNamespace == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 37, x.GetCsharpNamespace())
	return offset
}

func (x *FileOptions) fastWriteField39(buf []byte) (offset int) {
	if x.SwiftPrefix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 39, x.GetSwiftPrefix())
	return offset
}

func (x *FileOptions) fastWriteField40(buf []byte) (offset int) {
	if x.PhpClassPrefix == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 40, x.GetPhpClassPrefix())
	return offset
}

func (x *FileOptions) fastWriteField41(buf []byte) (offset int) {
	if x.PhpNamespace == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 41, x.GetPhpNamespace())
	return offset
}

func (x *FileOptions) fastWriteField44(buf []byte) (offset int) {
	if x.PhpMetadataNamespace == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 44, x.GetPhpMetadataNamespace())
	return offset
}

func (x *FileOptions) fastWriteField45(buf []byte) (offset int) {
	if x.RubyPackage == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 45, x.GetRubyPackage())
	return offset
}

func (x *FileOptions) fastWriteField50(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 50, x.GetFeatures())
	return offset
}

func (x *FileOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *MessageOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *MessageOptions) fastWriteField1(buf []byte) (offset int) {
	if !x.MessageSetWireFormat {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetMessageSetWireFormat())
	return offset
}

func (x *MessageOptions) fastWriteField2(buf []byte) (offset int) {
	if !x.NoStandardDescriptorAccessor {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetNoStandardDescriptorAccessor())
	return offset
}

func (x *MessageOptions) fastWriteField3(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetDeprecated())
	return offset
}

func (x *MessageOptions) fastWriteField7(buf []byte) (offset int) {
	if !x.MapEntry {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetMapEntry())
	return offset
}

func (x *MessageOptions) fastWriteField11(buf []byte) (offset int) {
	if !x.DeprecatedLegacyJsonFieldConflicts {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 11, x.GetDeprecatedLegacyJsonFieldConflicts())
	return offset
}

func (x *MessageOptions) fastWriteField12(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 12, x.GetFeatures())
	return offset
}

func (x *MessageOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *FieldOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField19(buf[offset:])
	offset += x.fastWriteField20(buf[offset:])
	offset += x.fastWriteField21(buf[offset:])
	offset += x.fastWriteField22(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *FieldOptions) fastWriteField1(buf []byte) (offset int) {
	if x.Ctype == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetCtype()))
	return offset
}

func (x *FieldOptions) fastWriteField2(buf []byte) (offset int) {
	if !x.Packed {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetPacked())
	return offset
}

func (x *FieldOptions) fastWriteField3(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetDeprecated())
	return offset
}

func (x *FieldOptions) fastWriteField5(buf []byte) (offset int) {
	if !x.Lazy {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetLazy())
	return offset
}

func (x *FieldOptions) fastWriteField6(buf []byte) (offset int) {
	if x.Jstype == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetJstype()))
	return offset
}

func (x *FieldOptions) fastWriteField10(buf []byte) (offset int) {
	if !x.Weak {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 10, x.GetWeak())
	return offset
}

func (x *FieldOptions) fastWriteField15(buf []byte) (offset int) {
	if !x.UnverifiedLazy {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 15, x.GetUnverifiedLazy())
	return offset
}

func (x *FieldOptions) fastWriteField16(buf []byte) (offset int) {
	if !x.DebugRedact {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 16, x.GetDebugRedact())
	return offset
}

func (x *FieldOptions) fastWriteField17(buf []byte) (offset int) {
	if x.Retention == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 17, int32(x.GetRetention()))
	return offset
}

func (x *FieldOptions) fastWriteField19(buf []byte) (offset int) {
	if len(x.Targets) == 0 {
		return offset
	}
	for i := range x.GetTargets() {
		offset += fastpb.WriteInt32(buf[offset:], 19, int32(x.GetTargets()[i]))
	}
	return offset
}

func (x *FieldOptions) fastWriteField20(buf []byte) (offset int) {
	if x.EditionDefaults == nil {
		return offset
	}
	for i := range x.GetEditionDefaults() {
		offset += fastpb.WriteMessage(buf[offset:], 20, x.GetEditionDefaults()[i])
	}
	return offset
}

func (x *FieldOptions) fastWriteField21(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 21, x.GetFeatures())
	return offset
}

func (x *FieldOptions) fastWriteField22(buf []byte) (offset int) {
	if x.FeatureSupport == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 22, x.GetFeatureSupport())
	return offset
}

func (x *FieldOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *OneofOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *OneofOptions) fastWriteField1(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetFeatures())
	return offset
}

func (x *OneofOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *EnumOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *EnumOptions) fastWriteField2(buf []byte) (offset int) {
	if !x.AllowAlias {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetAllowAlias())
	return offset
}

func (x *EnumOptions) fastWriteField3(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetDeprecated())
	return offset
}

func (x *EnumOptions) fastWriteField6(buf []byte) (offset int) {
	if !x.DeprecatedLegacyJsonFieldConflicts {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetDeprecatedLegacyJsonFieldConflicts())
	return offset
}

func (x *EnumOptions) fastWriteField7(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 7, x.GetFeatures())
	return offset
}

func (x *EnumOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *EnumValueOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *EnumValueOptions) fastWriteField1(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDeprecated())
	return offset
}

func (x *EnumValueOptions) fastWriteField2(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetFeatures())
	return offset
}

func (x *EnumValueOptions) fastWriteField3(buf []byte) (offset int) {
	if !x.DebugRedact {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetDebugRedact())
	return offset
}

func (x *EnumValueOptions) fastWriteField4(buf []byte) (offset int) {
	if x.FeatureSupport == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetFeatureSupport())
	return offset
}

func (x *EnumValueOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *ServiceOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField33(buf[offset:])
	offset += x.fastWriteField34(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *ServiceOptions) fastWriteField33(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 33, x.GetDeprecated())
	return offset
}

func (x *ServiceOptions) fastWriteField34(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 34, x.GetFeatures())
	return offset
}

func (x *ServiceOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *MethodOptions) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField33(buf[offset:])
	offset += x.fastWriteField34(buf[offset:])
	offset += x.fastWriteField35(buf[offset:])
	offset += x.fastWriteField999(buf[offset:])
	return offset
}

func (x *MethodOptions) fastWriteField33(buf []byte) (offset int) {
	if !x.Deprecated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 33, x.GetDeprecated())
	return offset
}

func (x *MethodOptions) fastWriteField34(buf []byte) (offset int) {
	if x.IdempotencyLevel == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 34, int32(x.GetIdempotencyLevel()))
	return offset
}

func (x *MethodOptions) fastWriteField35(buf []byte) (offset int) {
	if x.Features == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 35, x.GetFeatures())
	return offset
}

func (x *MethodOptions) fastWriteField999(buf []byte) (offset int) {
	if x.UninterpretedOption == nil {
		return offset
	}
	for i := range x.GetUninterpretedOption() {
		offset += fastpb.WriteMessage(buf[offset:], 999, x.GetUninterpretedOption()[i])
	}
	return offset
}

func (x *UninterpretedOption) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *UninterpretedOption) fastWriteField2(buf []byte) (offset int) {
	if x.Name == nil {
		return offset
	}
	for i := range x.GetName() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetName()[i])
	}
	return offset
}

func (x *UninterpretedOption) fastWriteField3(buf []byte) (offset int) {
	if x.IdentifierValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetIdentifierValue())
	return offset
}

func (x *UninterpretedOption) fastWriteField4(buf []byte) (offset int) {
	if x.PositiveIntValue == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 4, x.GetPositiveIntValue())
	return offset
}

func (x *UninterpretedOption) fastWriteField5(buf []byte) (offset int) {
	if x.NegativeIntValue == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetNegativeIntValue())
	return offset
}

func (x *UninterpretedOption) fastWriteField6(buf []byte) (offset int) {
	if x.DoubleValue == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 6, x.GetDoubleValue())
	return offset
}

func (x *UninterpretedOption) fastWriteField7(buf []byte) (offset int) {
	if len(x.StringValue) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 7, x.GetStringValue())
	return offset
}

func (x *UninterpretedOption) fastWriteField8(buf []byte) (offset int) {
	if x.AggregateValue == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetAggregateValue())
	return offset
}

func (x *FeatureSet) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *FeatureSet) fastWriteField1(buf []byte) (offset int) {
	if x.FieldPresence == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetFieldPresence()))
	return offset
}

func (x *FeatureSet) fastWriteField2(buf []byte) (offset int) {
	if x.EnumType == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetEnumType()))
	return offset
}

func (x *FeatureSet) fastWriteField3(buf []byte) (offset int) {
	if x.RepeatedFieldEncoding == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetRepeatedFieldEncoding()))
	return offset
}

func (x *FeatureSet) fastWriteField4(buf []byte) (offset int) {
	if x.Utf8Validation == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetUtf8Validation()))
	return offset
}

func (x *FeatureSet) fastWriteField5(buf []byte) (offset int) {
	if x.MessageEncoding == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetMessageEncoding()))
	return offset
}

func (x *FeatureSet) fastWriteField6(buf []byte) (offset int) {
	if x.JsonFormat == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetJsonFormat()))
	return offset
}

func (x *FeatureSet) fastWriteField7(buf []byte) (offset int) {
	if x.EnforceNamingStyle == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 7, int32(x.GetEnforceNamingStyle()))
	return offset
}

func (x *FeatureSetDefaults) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *FeatureSetDefaults) fastWriteField1(buf []byte) (offset int) {
	if x.Defaults == nil {
		return offset
	}
	for i := range x.GetDefaults() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetDefaults()[i])
	}
	return offset
}

func (x *FeatureSetDefaults) fastWriteField4(buf []byte) (offset int) {
	if x.MinimumEdition == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetMinimumEdition()))
	return offset
}

func (x *FeatureSetDefaults) fastWriteField5(buf []byte) (offset int) {
	if x.MaximumEdition == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetMaximumEdition()))
	return offset
}

func (x *SourceCodeInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SourceCodeInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Location == nil {
		return offset
	}
	for i := range x.GetLocation() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetLocation()[i])
	}
	return offset
}

func (x *GeneratedCodeInfo) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GeneratedCodeInfo) fastWriteField1(buf []byte) (offset int) {
	if x.Annotation == nil {
		return offset
	}
	for i := range x.GetAnnotation() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAnnotation()[i])
	}
	return offset
}

func (x *DescriptorProto_ExtensionRange) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DescriptorProto_ExtensionRange) fastWriteField1(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStart())
	return offset
}

func (x *DescriptorProto_ExtensionRange) fastWriteField2(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetEnd())
	return offset
}

func (x *DescriptorProto_ExtensionRange) fastWriteField3(buf []byte) (offset int) {
	if x.Options == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetOptions())
	return offset
}

func (x *DescriptorProto_ReservedRange) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DescriptorProto_ReservedRange) fastWriteField1(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStart())
	return offset
}

func (x *DescriptorProto_ReservedRange) fastWriteField2(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetEnd())
	return offset
}

func (x *ExtensionRangeOptions_Declaration) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ExtensionRangeOptions_Declaration) fastWriteField1(buf []byte) (offset int) {
	if x.Number == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetNumber())
	return offset
}

func (x *ExtensionRangeOptions_Declaration) fastWriteField2(buf []byte) (offset int) {
	if x.FullName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetFullName())
	return offset
}

func (x *ExtensionRangeOptions_Declaration) fastWriteField3(buf []byte) (offset int) {
	if x.Type == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetType())
	return offset
}

func (x *ExtensionRangeOptions_Declaration) fastWriteField5(buf []byte) (offset int) {
	if !x.Reserved {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.GetReserved())
	return offset
}

func (x *ExtensionRangeOptions_Declaration) fastWriteField6(buf []byte) (offset int) {
	if !x.Repeated {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetRepeated())
	return offset
}

func (x *EnumDescriptorProto_EnumReservedRange) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *EnumDescriptorProto_EnumReservedRange) fastWriteField1(buf []byte) (offset int) {
	if x.Start == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStart())
	return offset
}

func (x *EnumDescriptorProto_EnumReservedRange) fastWriteField2(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetEnd())
	return offset
}

func (x *FieldOptions_EditionDefault) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *FieldOptions_EditionDefault) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *FieldOptions_EditionDefault) fastWriteField3(buf []byte) (offset int) {
	if x.Edition == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetEdition()))
	return offset
}

func (x *FieldOptions_FeatureSupport) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *FieldOptions_FeatureSupport) fastWriteField1(buf []byte) (offset int) {
	if x.EditionIntroduced == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, int32(x.GetEditionIntroduced()))
	return offset
}

func (x *FieldOptions_FeatureSupport) fastWriteField2(buf []byte) (offset int) {
	if x.EditionDeprecated == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetEditionDeprecated()))
	return offset
}

func (x *FieldOptions_FeatureSupport) fastWriteField3(buf []byte) (offset int) {
	if x.DeprecationWarning == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDeprecationWarning())
	return offset
}

func (x *FieldOptions_FeatureSupport) fastWriteField4(buf []byte) (offset int) {
	if x.EditionRemoved == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, int32(x.GetEditionRemoved()))
	return offset
}

func (x *UninterpretedOption_NamePart) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UninterpretedOption_NamePart) fastWriteField1(buf []byte) (offset int) {
	if x.NamePart == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetNamePart())
	return offset
}

func (x *UninterpretedOption_NamePart) fastWriteField2(buf []byte) (offset int) {
	if !x.IsExtension {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsExtension())
	return offset
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastWriteField3(buf []byte) (offset int) {
	if x.Edition == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetEdition()))
	return offset
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastWriteField4(buf []byte) (offset int) {
	if x.OverridableFeatures == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 4, x.GetOverridableFeatures())
	return offset
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) fastWriteField5(buf []byte) (offset int) {
	if x.FixedFeatures == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 5, x.GetFixedFeatures())
	return offset
}

func (x *SourceCodeInfo_Location) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *SourceCodeInfo_Location) fastWriteField1(buf []byte) (offset int) {
	if len(x.Path) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetPath()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetPath()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *SourceCodeInfo_Location) fastWriteField2(buf []byte) (offset int) {
	if len(x.Span) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 2, len(x.GetSpan()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetSpan()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *SourceCodeInfo_Location) fastWriteField3(buf []byte) (offset int) {
	if x.LeadingComments == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetLeadingComments())
	return offset
}

func (x *SourceCodeInfo_Location) fastWriteField4(buf []byte) (offset int) {
	if x.TrailingComments == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetTrailingComments())
	return offset
}

func (x *SourceCodeInfo_Location) fastWriteField6(buf []byte) (offset int) {
	if len(x.LeadingDetachedComments) == 0 {
		return offset
	}
	for i := range x.GetLeadingDetachedComments() {
		offset += fastpb.WriteString(buf[offset:], 6, x.GetLeadingDetachedComments()[i])
	}
	return offset
}

func (x *GeneratedCodeInfo_Annotation) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *GeneratedCodeInfo_Annotation) fastWriteField1(buf []byte) (offset int) {
	if len(x.Path) == 0 {
		return offset
	}
	offset += fastpb.WriteListPacked(buf[offset:], 1, len(x.GetPath()),
		func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
			offset := 0
			offset += fastpb.WriteInt32(buf[offset:], numTagOrKey, x.GetPath()[numIdxOrVal])
			return offset
		})
	return offset
}

func (x *GeneratedCodeInfo_Annotation) fastWriteField2(buf []byte) (offset int) {
	if x.SourceFile == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetSourceFile())
	return offset
}

func (x *GeneratedCodeInfo_Annotation) fastWriteField3(buf []byte) (offset int) {
	if x.Begin == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, x.GetBegin())
	return offset
}

func (x *GeneratedCodeInfo_Annotation) fastWriteField4(buf []byte) (offset int) {
	if x.End == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetEnd())
	return offset
}

func (x *GeneratedCodeInfo_Annotation) fastWriteField5(buf []byte) (offset int) {
	if x.Semantic == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 5, int32(x.GetSemantic()))
	return offset
}

func (x *FileDescriptorSet) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *FileDescriptorSet) sizeField1() (n int) {
	if x.File == nil {
		return n
	}
	for i := range x.GetFile() {
		n += fastpb.SizeMessage(1, x.GetFile()[i])
	}
	return n
}

func (x *FileDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField14()
	return n
}

func (x *FileDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *FileDescriptorProto) sizeField2() (n int) {
	if x.Package == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPackage())
	return n
}

func (x *FileDescriptorProto) sizeField3() (n int) {
	if len(x.Dependency) == 0 {
		return n
	}
	for i := range x.GetDependency() {
		n += fastpb.SizeString(3, x.GetDependency()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField4() (n int) {
	if x.MessageType == nil {
		return n
	}
	for i := range x.GetMessageType() {
		n += fastpb.SizeMessage(4, x.GetMessageType()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField5() (n int) {
	if x.EnumType == nil {
		return n
	}
	for i := range x.GetEnumType() {
		n += fastpb.SizeMessage(5, x.GetEnumType()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField6() (n int) {
	if x.Service == nil {
		return n
	}
	for i := range x.GetService() {
		n += fastpb.SizeMessage(6, x.GetService()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField7() (n int) {
	if x.Extension == nil {
		return n
	}
	for i := range x.GetExtension() {
		n += fastpb.SizeMessage(7, x.GetExtension()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField8() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetOptions())
	return n
}

func (x *FileDescriptorProto) sizeField9() (n int) {
	if x.SourceCodeInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(9, x.GetSourceCodeInfo())
	return n
}

func (x *FileDescriptorProto) sizeField10() (n int) {
	if len(x.PublicDependency) == 0 {
		return n
	}
	for i := range x.GetPublicDependency() {
		n += fastpb.SizeInt32(10, x.GetPublicDependency()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField11() (n int) {
	if len(x.WeakDependency) == 0 {
		return n
	}
	for i := range x.GetWeakDependency() {
		n += fastpb.SizeInt32(11, x.GetWeakDependency()[i])
	}
	return n
}

func (x *FileDescriptorProto) sizeField12() (n int) {
	if x.Syntax == "" {
		return n
	}
	n += fastpb.SizeString(12, x.GetSyntax())
	return n
}

func (x *FileDescriptorProto) sizeField14() (n int) {
	if x.Edition == 0 {
		return n
	}
	n += fastpb.SizeInt32(14, int32(x.GetEdition()))
	return n
}

func (x *DescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	return n
}

func (x *DescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *DescriptorProto) sizeField2() (n int) {
	if x.Field == nil {
		return n
	}
	for i := range x.GetField() {
		n += fastpb.SizeMessage(2, x.GetField()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField3() (n int) {
	if x.NestedType == nil {
		return n
	}
	for i := range x.GetNestedType() {
		n += fastpb.SizeMessage(3, x.GetNestedType()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField4() (n int) {
	if x.EnumType == nil {
		return n
	}
	for i := range x.GetEnumType() {
		n += fastpb.SizeMessage(4, x.GetEnumType()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField5() (n int) {
	if x.ExtensionRange == nil {
		return n
	}
	for i := range x.GetExtensionRange() {
		n += fastpb.SizeMessage(5, x.GetExtensionRange()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField6() (n int) {
	if x.Extension == nil {
		return n
	}
	for i := range x.GetExtension() {
		n += fastpb.SizeMessage(6, x.GetExtension()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField7() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(7, x.GetOptions())
	return n
}

func (x *DescriptorProto) sizeField8() (n int) {
	if x.OneofDecl == nil {
		return n
	}
	for i := range x.GetOneofDecl() {
		n += fastpb.SizeMessage(8, x.GetOneofDecl()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField9() (n int) {
	if x.ReservedRange == nil {
		return n
	}
	for i := range x.GetReservedRange() {
		n += fastpb.SizeMessage(9, x.GetReservedRange()[i])
	}
	return n
}

func (x *DescriptorProto) sizeField10() (n int) {
	if len(x.ReservedName) == 0 {
		return n
	}
	for i := range x.GetReservedName() {
		n += fastpb.SizeString(10, x.GetReservedName()[i])
	}
	return n
}

func (x *ExtensionRangeOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField50()
	n += x.sizeField999()
	return n
}

func (x *ExtensionRangeOptions) sizeField2() (n int) {
	if x.Declaration == nil {
		return n
	}
	for i := range x.GetDeclaration() {
		n += fastpb.SizeMessage(2, x.GetDeclaration()[i])
	}
	return n
}

func (x *ExtensionRangeOptions) sizeField3() (n int) {
	if x.Verification == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetVerification()))
	return n
}

func (x *ExtensionRangeOptions) sizeField50() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(50, x.GetFeatures())
	return n
}

func (x *ExtensionRangeOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *FieldDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField17()
	return n
}

func (x *FieldDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *FieldDescriptorProto) sizeField2() (n int) {
	if x.Extendee == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetExtendee())
	return n
}

func (x *FieldDescriptorProto) sizeField3() (n int) {
	if x.Number == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetNumber())
	return n
}

func (x *FieldDescriptorProto) sizeField4() (n int) {
	if x.Label == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetLabel()))
	return n
}

func (x *FieldDescriptorProto) sizeField5() (n int) {
	if x.Type == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetType()))
	return n
}

func (x *FieldDescriptorProto) sizeField6() (n int) {
	if x.TypeName == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetTypeName())
	return n
}

func (x *FieldDescriptorProto) sizeField7() (n int) {
	if x.DefaultValue == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetDefaultValue())
	return n
}

func (x *FieldDescriptorProto) sizeField8() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(8, x.GetOptions())
	return n
}

func (x *FieldDescriptorProto) sizeField9() (n int) {
	if x.OneofIndex == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetOneofIndex())
	return n
}

func (x *FieldDescriptorProto) sizeField10() (n int) {
	if x.JsonName == "" {
		return n
	}
	n += fastpb.SizeString(10, x.GetJsonName())
	return n
}

func (x *FieldDescriptorProto) sizeField17() (n int) {
	if !x.Proto3Optional {
		return n
	}
	n += fastpb.SizeBool(17, x.GetProto3Optional())
	return n
}

func (x *OneofDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *OneofDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *OneofDescriptorProto) sizeField2() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetOptions())
	return n
}

func (x *EnumDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *EnumDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *EnumDescriptorProto) sizeField2() (n int) {
	if x.Value == nil {
		return n
	}
	for i := range x.GetValue() {
		n += fastpb.SizeMessage(2, x.GetValue()[i])
	}
	return n
}

func (x *EnumDescriptorProto) sizeField3() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetOptions())
	return n
}

func (x *EnumDescriptorProto) sizeField4() (n int) {
	if x.ReservedRange == nil {
		return n
	}
	for i := range x.GetReservedRange() {
		n += fastpb.SizeMessage(4, x.GetReservedRange()[i])
	}
	return n
}

func (x *EnumDescriptorProto) sizeField5() (n int) {
	if len(x.ReservedName) == 0 {
		return n
	}
	for i := range x.GetReservedName() {
		n += fastpb.SizeString(5, x.GetReservedName()[i])
	}
	return n
}

func (x *EnumValueDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *EnumValueDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *EnumValueDescriptorProto) sizeField2() (n int) {
	if x.Number == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetNumber())
	return n
}

func (x *EnumValueDescriptorProto) sizeField3() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetOptions())
	return n
}

func (x *ServiceDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ServiceDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *ServiceDescriptorProto) sizeField2() (n int) {
	if x.Method == nil {
		return n
	}
	for i := range x.GetMethod() {
		n += fastpb.SizeMessage(2, x.GetMethod()[i])
	}
	return n
}

func (x *ServiceDescriptorProto) sizeField3() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetOptions())
	return n
}

func (x *MethodDescriptorProto) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *MethodDescriptorProto) sizeField1() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetName())
	return n
}

func (x *MethodDescriptorProto) sizeField2() (n int) {
	if x.InputType == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetInputType())
	return n
}

func (x *MethodDescriptorProto) sizeField3() (n int) {
	if x.OutputType == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetOutputType())
	return n
}

func (x *MethodDescriptorProto) sizeField4() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetOptions())
	return n
}

func (x *MethodDescriptorProto) sizeField5() (n int) {
	if !x.ClientStreaming {
		return n
	}
	n += fastpb.SizeBool(5, x.GetClientStreaming())
	return n
}

func (x *MethodDescriptorProto) sizeField6() (n int) {
	if !x.ServerStreaming {
		return n
	}
	n += fastpb.SizeBool(6, x.GetServerStreaming())
	return n
}

func (x *FileOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	n += x.sizeField20()
	n += x.sizeField23()
	n += x.sizeField27()
	n += x.sizeField31()
	n += x.sizeField36()
	n += x.sizeField37()
	n += x.sizeField39()
	n += x.sizeField40()
	n += x.sizeField41()
	n += x.sizeField44()
	n += x.sizeField45()
	n += x.sizeField50()
	n += x.sizeField999()
	return n
}

func (x *FileOptions) sizeField1() (n int) {
	if x.JavaPackage == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetJavaPackage())
	return n
}

func (x *FileOptions) sizeField8() (n int) {
	if x.JavaOuterClassname == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetJavaOuterClassname())
	return n
}

func (x *FileOptions) sizeField9() (n int) {
	if x.OptimizeFor == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, int32(x.GetOptimizeFor()))
	return n
}

func (x *FileOptions) sizeField10() (n int) {
	if !x.JavaMultipleFiles {
		return n
	}
	n += fastpb.SizeBool(10, x.GetJavaMultipleFiles())
	return n
}

func (x *FileOptions) sizeField11() (n int) {
	if x.GoPackage == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetGoPackage())
	return n
}

func (x *FileOptions) sizeField16() (n int) {
	if !x.CcGenericServices {
		return n
	}
	n += fastpb.SizeBool(16, x.GetCcGenericServices())
	return n
}

func (x *FileOptions) sizeField17() (n int) {
	if !x.JavaGenericServices {
		return n
	}
	n += fastpb.SizeBool(17, x.GetJavaGenericServices())
	return n
}

func (x *FileOptions) sizeField18() (n int) {
	if !x.PyGenericServices {
		return n
	}
	n += fastpb.SizeBool(18, x.GetPyGenericServices())
	return n
}

func (x *FileOptions) sizeField20() (n int) {
	if !x.JavaGenerateEqualsAndHash {
		return n
	}
	n += fastpb.SizeBool(20, x.GetJavaGenerateEqualsAndHash())
	return n
}

func (x *FileOptions) sizeField23() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(23, x.GetDeprecated())
	return n
}

func (x *FileOptions) sizeField27() (n int) {
	if !x.JavaStringCheckUtf8 {
		return n
	}
	n += fastpb.SizeBool(27, x.GetJavaStringCheckUtf8())
	return n
}

func (x *FileOptions) sizeField31() (n int) {
	if !x.CcEnableArenas {
		return n
	}
	n += fastpb.SizeBool(31, x.GetCcEnableArenas())
	return n
}

func (x *FileOptions) sizeField36() (n int) {
	if x.ObjcClassPrefix == "" {
		return n
	}
	n += fastpb.SizeString(36, x.GetObjcClassPrefix())
	return n
}

func (x *FileOptions) sizeField37() (n int) {
	if x.CsharpNamespace == "" {
		return n
	}
	n += fastpb.SizeString(37, x.GetCsharpNamespace())
	return n
}

func (x *FileOptions) sizeField39() (n int) {
	if x.SwiftPrefix == "" {
		return n
	}
	n += fastpb.SizeString(39, x.GetSwiftPrefix())
	return n
}

func (x *FileOptions) sizeField40() (n int) {
	if x.PhpClassPrefix == "" {
		return n
	}
	n += fastpb.SizeString(40, x.GetPhpClassPrefix())
	return n
}

func (x *FileOptions) sizeField41() (n int) {
	if x.PhpNamespace == "" {
		return n
	}
	n += fastpb.SizeString(41, x.GetPhpNamespace())
	return n
}

func (x *FileOptions) sizeField44() (n int) {
	if x.PhpMetadataNamespace == "" {
		return n
	}
	n += fastpb.SizeString(44, x.GetPhpMetadataNamespace())
	return n
}

func (x *FileOptions) sizeField45() (n int) {
	if x.RubyPackage == "" {
		return n
	}
	n += fastpb.SizeString(45, x.GetRubyPackage())
	return n
}

func (x *FileOptions) sizeField50() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(50, x.GetFeatures())
	return n
}

func (x *FileOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *MessageOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField7()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField999()
	return n
}

func (x *MessageOptions) sizeField1() (n int) {
	if !x.MessageSetWireFormat {
		return n
	}
	n += fastpb.SizeBool(1, x.GetMessageSetWireFormat())
	return n
}

func (x *MessageOptions) sizeField2() (n int) {
	if !x.NoStandardDescriptorAccessor {
		return n
	}
	n += fastpb.SizeBool(2, x.GetNoStandardDescriptorAccessor())
	return n
}

func (x *MessageOptions) sizeField3() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(3, x.GetDeprecated())
	return n
}

func (x *MessageOptions) sizeField7() (n int) {
	if !x.MapEntry {
		return n
	}
	n += fastpb.SizeBool(7, x.GetMapEntry())
	return n
}

func (x *MessageOptions) sizeField11() (n int) {
	if !x.DeprecatedLegacyJsonFieldConflicts {
		return n
	}
	n += fastpb.SizeBool(11, x.GetDeprecatedLegacyJsonFieldConflicts())
	return n
}

func (x *MessageOptions) sizeField12() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(12, x.GetFeatures())
	return n
}

func (x *MessageOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *FieldOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField10()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField19()
	n += x.sizeField20()
	n += x.sizeField21()
	n += x.sizeField22()
	n += x.sizeField999()
	return n
}

func (x *FieldOptions) sizeField1() (n int) {
	if x.Ctype == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetCtype()))
	return n
}

func (x *FieldOptions) sizeField2() (n int) {
	if !x.Packed {
		return n
	}
	n += fastpb.SizeBool(2, x.GetPacked())
	return n
}

func (x *FieldOptions) sizeField3() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(3, x.GetDeprecated())
	return n
}

func (x *FieldOptions) sizeField5() (n int) {
	if !x.Lazy {
		return n
	}
	n += fastpb.SizeBool(5, x.GetLazy())
	return n
}

func (x *FieldOptions) sizeField6() (n int) {
	if x.Jstype == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetJstype()))
	return n
}

func (x *FieldOptions) sizeField10() (n int) {
	if !x.Weak {
		return n
	}
	n += fastpb.SizeBool(10, x.GetWeak())
	return n
}

func (x *FieldOptions) sizeField15() (n int) {
	if !x.UnverifiedLazy {
		return n
	}
	n += fastpb.SizeBool(15, x.GetUnverifiedLazy())
	return n
}

func (x *FieldOptions) sizeField16() (n int) {
	if !x.DebugRedact {
		return n
	}
	n += fastpb.SizeBool(16, x.GetDebugRedact())
	return n
}

func (x *FieldOptions) sizeField17() (n int) {
	if x.Retention == 0 {
		return n
	}
	n += fastpb.SizeInt32(17, int32(x.GetRetention()))
	return n
}

func (x *FieldOptions) sizeField19() (n int) {
	if len(x.Targets) == 0 {
		return n
	}
	for i := range x.GetTargets() {
		n += fastpb.SizeInt32(19, int32(x.GetTargets()[i]))
	}
	return n
}

func (x *FieldOptions) sizeField20() (n int) {
	if x.EditionDefaults == nil {
		return n
	}
	for i := range x.GetEditionDefaults() {
		n += fastpb.SizeMessage(20, x.GetEditionDefaults()[i])
	}
	return n
}

func (x *FieldOptions) sizeField21() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(21, x.GetFeatures())
	return n
}

func (x *FieldOptions) sizeField22() (n int) {
	if x.FeatureSupport == nil {
		return n
	}
	n += fastpb.SizeMessage(22, x.GetFeatureSupport())
	return n
}

func (x *FieldOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *OneofOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField999()
	return n
}

func (x *OneofOptions) sizeField1() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetFeatures())
	return n
}

func (x *OneofOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *EnumOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField999()
	return n
}

func (x *EnumOptions) sizeField2() (n int) {
	if !x.AllowAlias {
		return n
	}
	n += fastpb.SizeBool(2, x.GetAllowAlias())
	return n
}

func (x *EnumOptions) sizeField3() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(3, x.GetDeprecated())
	return n
}

func (x *EnumOptions) sizeField6() (n int) {
	if !x.DeprecatedLegacyJsonFieldConflicts {
		return n
	}
	n += fastpb.SizeBool(6, x.GetDeprecatedLegacyJsonFieldConflicts())
	return n
}

func (x *EnumOptions) sizeField7() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(7, x.GetFeatures())
	return n
}

func (x *EnumOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *EnumValueOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField999()
	return n
}

func (x *EnumValueOptions) sizeField1() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDeprecated())
	return n
}

func (x *EnumValueOptions) sizeField2() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetFeatures())
	return n
}

func (x *EnumValueOptions) sizeField3() (n int) {
	if !x.DebugRedact {
		return n
	}
	n += fastpb.SizeBool(3, x.GetDebugRedact())
	return n
}

func (x *EnumValueOptions) sizeField4() (n int) {
	if x.FeatureSupport == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetFeatureSupport())
	return n
}

func (x *EnumValueOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *ServiceOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField33()
	n += x.sizeField34()
	n += x.sizeField999()
	return n
}

func (x *ServiceOptions) sizeField33() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(33, x.GetDeprecated())
	return n
}

func (x *ServiceOptions) sizeField34() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(34, x.GetFeatures())
	return n
}

func (x *ServiceOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *MethodOptions) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField33()
	n += x.sizeField34()
	n += x.sizeField35()
	n += x.sizeField999()
	return n
}

func (x *MethodOptions) sizeField33() (n int) {
	if !x.Deprecated {
		return n
	}
	n += fastpb.SizeBool(33, x.GetDeprecated())
	return n
}

func (x *MethodOptions) sizeField34() (n int) {
	if x.IdempotencyLevel == 0 {
		return n
	}
	n += fastpb.SizeInt32(34, int32(x.GetIdempotencyLevel()))
	return n
}

func (x *MethodOptions) sizeField35() (n int) {
	if x.Features == nil {
		return n
	}
	n += fastpb.SizeMessage(35, x.GetFeatures())
	return n
}

func (x *MethodOptions) sizeField999() (n int) {
	if x.UninterpretedOption == nil {
		return n
	}
	for i := range x.GetUninterpretedOption() {
		n += fastpb.SizeMessage(999, x.GetUninterpretedOption()[i])
	}
	return n
}

func (x *UninterpretedOption) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *UninterpretedOption) sizeField2() (n int) {
	if x.Name == nil {
		return n
	}
	for i := range x.GetName() {
		n += fastpb.SizeMessage(2, x.GetName()[i])
	}
	return n
}

func (x *UninterpretedOption) sizeField3() (n int) {
	if x.IdentifierValue == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetIdentifierValue())
	return n
}

func (x *UninterpretedOption) sizeField4() (n int) {
	if x.PositiveIntValue == 0 {
		return n
	}
	n += fastpb.SizeUint64(4, x.GetPositiveIntValue())
	return n
}

func (x *UninterpretedOption) sizeField5() (n int) {
	if x.NegativeIntValue == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetNegativeIntValue())
	return n
}

func (x *UninterpretedOption) sizeField6() (n int) {
	if x.DoubleValue == 0 {
		return n
	}
	n += fastpb.SizeDouble(6, x.GetDoubleValue())
	return n
}

func (x *UninterpretedOption) sizeField7() (n int) {
	if len(x.StringValue) == 0 {
		return n
	}
	n += fastpb.SizeBytes(7, x.GetStringValue())
	return n
}

func (x *UninterpretedOption) sizeField8() (n int) {
	if x.AggregateValue == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetAggregateValue())
	return n
}

func (x *FeatureSet) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *FeatureSet) sizeField1() (n int) {
	if x.FieldPresence == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetFieldPresence()))
	return n
}

func (x *FeatureSet) sizeField2() (n int) {
	if x.EnumType == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetEnumType()))
	return n
}

func (x *FeatureSet) sizeField3() (n int) {
	if x.RepeatedFieldEncoding == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetRepeatedFieldEncoding()))
	return n
}

func (x *FeatureSet) sizeField4() (n int) {
	if x.Utf8Validation == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetUtf8Validation()))
	return n
}

func (x *FeatureSet) sizeField5() (n int) {
	if x.MessageEncoding == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetMessageEncoding()))
	return n
}

func (x *FeatureSet) sizeField6() (n int) {
	if x.JsonFormat == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetJsonFormat()))
	return n
}

func (x *FeatureSet) sizeField7() (n int) {
	if x.EnforceNamingStyle == 0 {
		return n
	}
	n += fastpb.SizeInt32(7, int32(x.GetEnforceNamingStyle()))
	return n
}

func (x *FeatureSetDefaults) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *FeatureSetDefaults) sizeField1() (n int) {
	if x.Defaults == nil {
		return n
	}
	for i := range x.GetDefaults() {
		n += fastpb.SizeMessage(1, x.GetDefaults()[i])
	}
	return n
}

func (x *FeatureSetDefaults) sizeField4() (n int) {
	if x.MinimumEdition == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetMinimumEdition()))
	return n
}

func (x *FeatureSetDefaults) sizeField5() (n int) {
	if x.MaximumEdition == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetMaximumEdition()))
	return n
}

func (x *SourceCodeInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SourceCodeInfo) sizeField1() (n int) {
	if x.Location == nil {
		return n
	}
	for i := range x.GetLocation() {
		n += fastpb.SizeMessage(1, x.GetLocation()[i])
	}
	return n
}

func (x *GeneratedCodeInfo) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GeneratedCodeInfo) sizeField1() (n int) {
	if x.Annotation == nil {
		return n
	}
	for i := range x.GetAnnotation() {
		n += fastpb.SizeMessage(1, x.GetAnnotation()[i])
	}
	return n
}

func (x *DescriptorProto_ExtensionRange) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DescriptorProto_ExtensionRange) sizeField1() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStart())
	return n
}

func (x *DescriptorProto_ExtensionRange) sizeField2() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetEnd())
	return n
}

func (x *DescriptorProto_ExtensionRange) sizeField3() (n int) {
	if x.Options == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetOptions())
	return n
}

func (x *DescriptorProto_ReservedRange) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DescriptorProto_ReservedRange) sizeField1() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStart())
	return n
}

func (x *DescriptorProto_ReservedRange) sizeField2() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetEnd())
	return n
}

func (x *ExtensionRangeOptions_Declaration) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ExtensionRangeOptions_Declaration) sizeField1() (n int) {
	if x.Number == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetNumber())
	return n
}

func (x *ExtensionRangeOptions_Declaration) sizeField2() (n int) {
	if x.FullName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetFullName())
	return n
}

func (x *ExtensionRangeOptions_Declaration) sizeField3() (n int) {
	if x.Type == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetType())
	return n
}

func (x *ExtensionRangeOptions_Declaration) sizeField5() (n int) {
	if !x.Reserved {
		return n
	}
	n += fastpb.SizeBool(5, x.GetReserved())
	return n
}

func (x *ExtensionRangeOptions_Declaration) sizeField6() (n int) {
	if !x.Repeated {
		return n
	}
	n += fastpb.SizeBool(6, x.GetRepeated())
	return n
}

func (x *EnumDescriptorProto_EnumReservedRange) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *EnumDescriptorProto_EnumReservedRange) sizeField1() (n int) {
	if x.Start == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStart())
	return n
}

func (x *EnumDescriptorProto_EnumReservedRange) sizeField2() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetEnd())
	return n
}

func (x *FieldOptions_EditionDefault) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *FieldOptions_EditionDefault) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *FieldOptions_EditionDefault) sizeField3() (n int) {
	if x.Edition == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetEdition()))
	return n
}

func (x *FieldOptions_FeatureSupport) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *FieldOptions_FeatureSupport) sizeField1() (n int) {
	if x.EditionIntroduced == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, int32(x.GetEditionIntroduced()))
	return n
}

func (x *FieldOptions_FeatureSupport) sizeField2() (n int) {
	if x.EditionDeprecated == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetEditionDeprecated()))
	return n
}

func (x *FieldOptions_FeatureSupport) sizeField3() (n int) {
	if x.DeprecationWarning == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDeprecationWarning())
	return n
}

func (x *FieldOptions_FeatureSupport) sizeField4() (n int) {
	if x.EditionRemoved == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, int32(x.GetEditionRemoved()))
	return n
}

func (x *UninterpretedOption_NamePart) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UninterpretedOption_NamePart) sizeField1() (n int) {
	if x.NamePart == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetNamePart())
	return n
}

func (x *UninterpretedOption_NamePart) sizeField2() (n int) {
	if !x.IsExtension {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsExtension())
	return n
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) sizeField3() (n int) {
	if x.Edition == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetEdition()))
	return n
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) sizeField4() (n int) {
	if x.OverridableFeatures == nil {
		return n
	}
	n += fastpb.SizeMessage(4, x.GetOverridableFeatures())
	return n
}

func (x *FeatureSetDefaults_FeatureSetEditionDefault) sizeField5() (n int) {
	if x.FixedFeatures == nil {
		return n
	}
	n += fastpb.SizeMessage(5, x.GetFixedFeatures())
	return n
}

func (x *SourceCodeInfo_Location) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField6()
	return n
}

func (x *SourceCodeInfo_Location) sizeField1() (n int) {
	if len(x.Path) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetPath()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetPath()[numIdxOrVal])
			return n
		})
	return n
}

func (x *SourceCodeInfo_Location) sizeField2() (n int) {
	if len(x.Span) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(2, len(x.GetSpan()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetSpan()[numIdxOrVal])
			return n
		})
	return n
}

func (x *SourceCodeInfo_Location) sizeField3() (n int) {
	if x.LeadingComments == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetLeadingComments())
	return n
}

func (x *SourceCodeInfo_Location) sizeField4() (n int) {
	if x.TrailingComments == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetTrailingComments())
	return n
}

func (x *SourceCodeInfo_Location) sizeField6() (n int) {
	if len(x.LeadingDetachedComments) == 0 {
		return n
	}
	for i := range x.GetLeadingDetachedComments() {
		n += fastpb.SizeString(6, x.GetLeadingDetachedComments()[i])
	}
	return n
}

func (x *GeneratedCodeInfo_Annotation) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *GeneratedCodeInfo_Annotation) sizeField1() (n int) {
	if len(x.Path) == 0 {
		return n
	}
	n += fastpb.SizeListPacked(1, len(x.GetPath()),
		func(numTagOrKey, numIdxOrVal int32) int {
			n := 0
			n += fastpb.SizeInt32(numTagOrKey, x.GetPath()[numIdxOrVal])
			return n
		})
	return n
}

func (x *GeneratedCodeInfo_Annotation) sizeField2() (n int) {
	if x.SourceFile == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetSourceFile())
	return n
}

func (x *GeneratedCodeInfo_Annotation) sizeField3() (n int) {
	if x.Begin == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, x.GetBegin())
	return n
}

func (x *GeneratedCodeInfo_Annotation) sizeField4() (n int) {
	if x.End == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetEnd())
	return n
}

func (x *GeneratedCodeInfo_Annotation) sizeField5() (n int) {
	if x.Semantic == 0 {
		return n
	}
	n += fastpb.SizeInt32(5, int32(x.GetSemantic()))
	return n
}

var fieldIDToName_FileDescriptorSet = map[int32]string{
	1: "File",
}

var fieldIDToName_FileDescriptorProto = map[int32]string{
	1:  "Name",
	2:  "Package",
	3:  "Dependency",
	4:  "MessageType",
	5:  "EnumType",
	6:  "Service",
	7:  "Extension",
	8:  "Options",
	9:  "SourceCodeInfo",
	10: "PublicDependency",
	11: "WeakDependency",
	12: "Syntax",
	14: "Edition",
}

var fieldIDToName_DescriptorProto = map[int32]string{
	1:  "Name",
	2:  "Field",
	3:  "NestedType",
	4:  "EnumType",
	5:  "ExtensionRange",
	6:  "Extension",
	7:  "Options",
	8:  "OneofDecl",
	9:  "ReservedRange",
	10: "ReservedName",
}

var fieldIDToName_ExtensionRangeOptions = map[int32]string{
	2:   "Declaration",
	3:   "Verification",
	50:  "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_FieldDescriptorProto = map[int32]string{
	1:  "Name",
	2:  "Extendee",
	3:  "Number",
	4:  "Label",
	5:  "Type",
	6:  "TypeName",
	7:  "DefaultValue",
	8:  "Options",
	9:  "OneofIndex",
	10: "JsonName",
	17: "Proto3Optional",
}

var fieldIDToName_OneofDescriptorProto = map[int32]string{
	1: "Name",
	2: "Options",
}

var fieldIDToName_EnumDescriptorProto = map[int32]string{
	1: "Name",
	2: "Value",
	3: "Options",
	4: "ReservedRange",
	5: "ReservedName",
}

var fieldIDToName_EnumValueDescriptorProto = map[int32]string{
	1: "Name",
	2: "Number",
	3: "Options",
}

var fieldIDToName_ServiceDescriptorProto = map[int32]string{
	1: "Name",
	2: "Method",
	3: "Options",
}

var fieldIDToName_MethodDescriptorProto = map[int32]string{
	1: "Name",
	2: "InputType",
	3: "OutputType",
	4: "Options",
	5: "ClientStreaming",
	6: "ServerStreaming",
}

var fieldIDToName_FileOptions = map[int32]string{
	1:   "JavaPackage",
	8:   "JavaOuterClassname",
	9:   "OptimizeFor",
	10:  "JavaMultipleFiles",
	11:  "GoPackage",
	16:  "CcGenericServices",
	17:  "JavaGenericServices",
	18:  "PyGenericServices",
	20:  "JavaGenerateEqualsAndHash",
	23:  "Deprecated",
	27:  "JavaStringCheckUtf8",
	31:  "CcEnableArenas",
	36:  "ObjcClassPrefix",
	37:  "CsharpNamespace",
	39:  "SwiftPrefix",
	40:  "PhpClassPrefix",
	41:  "PhpNamespace",
	44:  "PhpMetadataNamespace",
	45:  "RubyPackage",
	50:  "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_MessageOptions = map[int32]string{
	1:   "MessageSetWireFormat",
	2:   "NoStandardDescriptorAccessor",
	3:   "Deprecated",
	7:   "MapEntry",
	11:  "DeprecatedLegacyJsonFieldConflicts",
	12:  "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_FieldOptions = map[int32]string{
	1:   "Ctype",
	2:   "Packed",
	3:   "Deprecated",
	5:   "Lazy",
	6:   "Jstype",
	10:  "Weak",
	15:  "UnverifiedLazy",
	16:  "DebugRedact",
	17:  "Retention",
	19:  "Targets",
	20:  "EditionDefaults",
	21:  "Features",
	22:  "FeatureSupport",
	999: "UninterpretedOption",
}

var fieldIDToName_OneofOptions = map[int32]string{
	1:   "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_EnumOptions = map[int32]string{
	2:   "AllowAlias",
	3:   "Deprecated",
	6:   "DeprecatedLegacyJsonFieldConflicts",
	7:   "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_EnumValueOptions = map[int32]string{
	1:   "Deprecated",
	2:   "Features",
	3:   "DebugRedact",
	4:   "FeatureSupport",
	999: "UninterpretedOption",
}

var fieldIDToName_ServiceOptions = map[int32]string{
	33:  "Deprecated",
	34:  "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_MethodOptions = map[int32]string{
	33:  "Deprecated",
	34:  "IdempotencyLevel",
	35:  "Features",
	999: "UninterpretedOption",
}

var fieldIDToName_UninterpretedOption = map[int32]string{
	2: "Name",
	3: "IdentifierValue",
	4: "PositiveIntValue",
	5: "NegativeIntValue",
	6: "DoubleValue",
	7: "StringValue",
	8: "AggregateValue",
}

var fieldIDToName_FeatureSet = map[int32]string{
	1: "FieldPresence",
	2: "EnumType",
	3: "RepeatedFieldEncoding",
	4: "Utf8Validation",
	5: "MessageEncoding",
	6: "JsonFormat",
	7: "EnforceNamingStyle",
}

var fieldIDToName_FeatureSetDefaults = map[int32]string{
	1: "Defaults",
	4: "MinimumEdition",
	5: "MaximumEdition",
}

var fieldIDToName_SourceCodeInfo = map[int32]string{
	1: "Location",
}

var fieldIDToName_GeneratedCodeInfo = map[int32]string{
	1: "Annotation",
}

var fieldIDToName_DescriptorProto_ExtensionRange = map[int32]string{
	1: "Start",
	2: "End",
	3: "Options",
}

var fieldIDToName_DescriptorProto_ReservedRange = map[int32]string{
	1: "Start",
	2: "End",
}

var fieldIDToName_ExtensionRangeOptions_Declaration = map[int32]string{
	1: "Number",
	2: "FullName",
	3: "Type",
	5: "Reserved",
	6: "Repeated",
}

var fieldIDToName_EnumDescriptorProto_EnumReservedRange = map[int32]string{
	1: "Start",
	2: "End",
}

var fieldIDToName_FieldOptions_EditionDefault = map[int32]string{
	2: "Value",
	3: "Edition",
}

var fieldIDToName_FieldOptions_FeatureSupport = map[int32]string{
	1: "EditionIntroduced",
	2: "EditionDeprecated",
	3: "DeprecationWarning",
	4: "EditionRemoved",
}

var fieldIDToName_UninterpretedOption_NamePart = map[int32]string{
	1: "NamePart",
	2: "IsExtension",
}

var fieldIDToName_FeatureSetDefaults_FeatureSetEditionDefault = map[int32]string{
	3: "Edition",
	4: "OverridableFeatures",
	5: "FixedFeatures",
}

var fieldIDToName_SourceCodeInfo_Location = map[int32]string{
	1: "Path",
	2: "Span",
	3: "LeadingComments",
	4: "TrailingComments",
	6: "LeadingDetachedComments",
}

var fieldIDToName_GeneratedCodeInfo_Annotation = map[int32]string{
	1: "Path",
	2: "SourceFile",
	3: "Begin",
	4: "End",
	5: "Semantic",
}
