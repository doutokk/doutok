// Code generated by Kitex v0.9.1. DO NOT EDIT.

package fileservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	file "github.com/doutokk/doutok/rpc_gen/kitex_gen/file"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"UploadFile": kitex.NewMethodInfo(
		uploadFileHandler,
		newUploadFileArgs,
		newUploadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"FrontendUploadFile": kitex.NewMethodInfo(
		frontendUploadFileHandler,
		newFrontendUploadFileArgs,
		newFrontendUploadFileResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	fileServiceServiceInfo                = NewServiceInfo()
	fileServiceServiceInfoForClient       = NewServiceInfoForClient()
	fileServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return fileServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return fileServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FileService"
	handlerType := (*file.FileService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "file",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func uploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.UploadFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).UploadFile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UploadFileArgs:
		success, err := handler.(file.FileService).UploadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadFileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUploadFileArgs() interface{} {
	return &UploadFileArgs{}
}

func newUploadFileResult() interface{} {
	return &UploadFileResult{}
}

type UploadFileArgs struct {
	Req *file.UploadFileReq
}

func (p *UploadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.UploadFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UploadFileArgs) Unmarshal(in []byte) error {
	msg := new(file.UploadFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadFileArgs_Req_DEFAULT *file.UploadFileReq

func (p *UploadFileArgs) GetReq() *file.UploadFileReq {
	if !p.IsSetReq() {
		return UploadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UploadFileResult struct {
	Success *file.UploadFileResp
}

var UploadFileResult_Success_DEFAULT *file.UploadFileResp

func (p *UploadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.UploadFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UploadFileResult) Unmarshal(in []byte) error {
	msg := new(file.UploadFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadFileResult) GetSuccess() *file.UploadFileResp {
	if !p.IsSetSuccess() {
		return UploadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.UploadFileResp)
}

func (p *UploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadFileResult) GetResult() interface{} {
	return p.Success
}

func frontendUploadFileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(file.FrontendUploadFileReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(file.FileService).FrontendUploadFile(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *FrontendUploadFileArgs:
		success, err := handler.(file.FileService).FrontendUploadFile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FrontendUploadFileResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newFrontendUploadFileArgs() interface{} {
	return &FrontendUploadFileArgs{}
}

func newFrontendUploadFileResult() interface{} {
	return &FrontendUploadFileResult{}
}

type FrontendUploadFileArgs struct {
	Req *file.FrontendUploadFileReq
}

func (p *FrontendUploadFileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(file.FrontendUploadFileReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FrontendUploadFileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FrontendUploadFileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FrontendUploadFileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *FrontendUploadFileArgs) Unmarshal(in []byte) error {
	msg := new(file.FrontendUploadFileReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FrontendUploadFileArgs_Req_DEFAULT *file.FrontendUploadFileReq

func (p *FrontendUploadFileArgs) GetReq() *file.FrontendUploadFileReq {
	if !p.IsSetReq() {
		return FrontendUploadFileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FrontendUploadFileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *FrontendUploadFileArgs) GetFirstArgument() interface{} {
	return p.Req
}

type FrontendUploadFileResult struct {
	Success *file.FrontendUploadFileResp
}

var FrontendUploadFileResult_Success_DEFAULT *file.FrontendUploadFileResp

func (p *FrontendUploadFileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(file.FrontendUploadFileResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FrontendUploadFileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FrontendUploadFileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FrontendUploadFileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *FrontendUploadFileResult) Unmarshal(in []byte) error {
	msg := new(file.FrontendUploadFileResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FrontendUploadFileResult) GetSuccess() *file.FrontendUploadFileResp {
	if !p.IsSetSuccess() {
		return FrontendUploadFileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FrontendUploadFileResult) SetSuccess(x interface{}) {
	p.Success = x.(*file.FrontendUploadFileResp)
}

func (p *FrontendUploadFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FrontendUploadFileResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadFile(ctx context.Context, Req *file.UploadFileReq) (r *file.UploadFileResp, err error) {
	var _args UploadFileArgs
	_args.Req = Req
	var _result UploadFileResult
	if err = p.c.Call(ctx, "UploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FrontendUploadFile(ctx context.Context, Req *file.FrontendUploadFileReq) (r *file.FrontendUploadFileResp, err error) {
	var _args FrontendUploadFileArgs
	_args.Req = Req
	var _result FrontendUploadFileResult
	if err = p.c.Call(ctx, "FrontendUploadFile", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
